<?xml version="1.0" encoding="UTF-8"?>
<article xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en" 
  id="XRU-manual">

<title>XBMC ROM utilities</title>
<articleinfo>
<author>
  <surname>Wintermute0110 <email>wintermute0110@gmail.com</email></surname>
</author>
<date>Jun 2014</date>
<version>0.1</version>
</articleinfo>

<sect1>
<title>Introduction</title>

<para>
XBMC ROM utilities (XRU) is a set of Python scripts that allow you to filter your ROM 
collections and artwork to be used with the XBMC launcher plugins like Advanced Launcher 
or ROM Collection Browser. Also, if the ROM collections are updated or a new version of 
the emulators installed (which may require some new ROMs to be updated) XRU is able to 
synchronise the XBMC launchers with the new ROMs quickly and effectively.
</para>

<para>
XRU includes three programs

<itemizedlist mark='bullet'>
<listitem><para>
xru-console filters a ROM collection with No-Intro naming conventions and copy 
the filtered list to the destination directory of your choice. Multiple ROM collections, 
each with a different filter, can be configured. Also, if artwork is available, it may 
also be synchronised.
</para></listitem>

<listitem><para>
xru-mame takes the MAME-generated XML game database and merges it with Catver.ini. Then, 
a set of filters can be defined (for example, to remove mechanical games) so filtered 
ROMs are copied to different destination directories. It also creates NFO files with 
game information and copies local artwork if available.
</para></listitem>
<listitem><para>
    xru-launcher-AL parses XBMC's Advanced Launcher configuration file and scans your 
ROM collections for missing ROMs. It prints a report with the launchers you have to update.
</para></listitem>
</itemizedlist>
</para>
</sect1>

<sect1>
<title>Command line options</title>

<sect2>
<title>xru-console</title>

<para>xru-console requires a mandatory command to specify the main action
to do. Optionally, some commands can be modified with options. Several
command also require a romSetName</para>

<screen>
$ xru-console.py [-options] command [romSetName]
</screen>

<para>The following commands are supported,</para>

<itemizedlist mark='bullet'>
<listitem><para>
<emphasis>usage</emphasis> prints a summary of the commands and options
</para></listitem>

<listitem><para>
<emphasis>list</emphasis>  list every ROM set system defined in the 
configuration file and some basic information. Use --verbose to get more information.
</para></listitem>

<listitem><para>
<emphasis>list-nointro &lt;filterName&gt;</emphasis> list every ROM set system 
defined in the No-Intro DAT file.
</para></listitem>

<listitem><para>
<emphasis>check-nointro &lt;filterName&gt;</emphasis> scan the source directory and 
reads No-Intro XML data file. Checks if you have all the ROMs and reports the 
number of missing ROMs.
</para></listitem>

<listitem><para>
<emphasis>list-tags &lt;filterName&gt;</emphasis> scan the source directory and 
reports the total number of ROM files, all the tags found, and the number of ROMs 
that have each tag. It also display tagless ROMs.
</para></listitem>

<listitem><para>
<emphasis>copy &lt;filterName&gt;</emphasis> applies the ROM filters defined in 
the configuration file and copies the contents of the source directory into 
the destination directory. This always overwrites ROMs in the destination
directory and may take a long time for huge ROM collections and network-mounted
destination directories.
</para></listitem>

<listitem><para>
<emphasis>update &lt;filterName&gt;</emphasis> is like copy, but only copies
ROMs if file sizes are different. This may save a lot of time.
</para></listitem>
</itemizedlist>
  
<para>The following options are supported,</para>

<itemizedlist mark='bullet'>
<listitem><para>
<emphasis>-h, --help</emphasis> print a short command reference
</para></listitem>

<listitem><para>
<emphasis>-v, --verbose</emphasis> print more information about what's going on.
</para></listitem>

<listitem><para>
<emphasis>-l, --log</emphasis> save program output in xru-console-log.txt.
</para></listitem>

<listitem><para> 
<emphasis>--logto &lt;logName&gt;</emphasis> save program output in the file 
you specify.
</para></listitem>

<listitem><para>
<emphasis>--dryRun</emphasis> don't modify the destination directory at all, 
just print the operations to be done.
</para></listitem>

<listitem><para>
<emphasis>--cleanNFO</emphasis> deletes redundant NFO files in destination 
directory.
</para></listitem>

<listitem><para>
<emphasis>--withArtWork</emphasis> copies/updates art work (fanart and thumbs) 
for the launchers.
</para></listitem>

<listitem><para>
<emphasis>--cleanROMs</emphasis> deletes ROMs in the destination directory 
not present in the filtered ROM list.
</para></listitem>

<listitem><para>
<emphasis>--cleanArtWork</emphasis> deletes thumbs and fanart in the artowork
destiation directories not present in the filtered ROM list.
</para></listitem>
</itemizedlist>

<para>xru-console requires a configuration file where you store the directories
and filters for every ROM set. A typical configuration filter looks like this</para>

<programlisting>
&lt;!-- Example configuration file for XBMC ROM utilities -->
&lt;ROMcollections>

&lt;!-- Nintendo ROMS -->
&lt;collection name="SNES NoIntro" shortname="snes">
  &lt;NoIntroDat>/home/xbmc/roms/DATs/Nintendo - Super Nintendo Entertainment System Parent-Clone (20140608-202038).dat&lt;/NoIntroDat>
  &lt;ROMsSource>/home/xbmc/roms/roms-nintendo-snes/&lt;/ROMsSource>
  &lt;ROMsDest>/home/xbmc/NUC/ROMs/roms-nintendo-snes/&lt;/ROMsDest>

  &lt;ThumbsSource>/home/xbmc/roms/ArtWork/nintendo-snes-boxes/&lt;/ThumbsSource>
  &lt;FanartSource>/home/xbmc/roms/ArtWork/nintendo-snes-snaps/&lt;/FanartSource>
  &lt;ThumbsDest>/home/xbmc/NUC/ROMs/ArtWork/nintendo-snes-thumbs/&lt;/ThumbsDest>
  &lt;FanartDest>/home/xbmc/NUC/ROMs/ArtWork/nintendo-snes-fanart/&lt;/FanartDest>

  &lt;filterUpTags>Europe, World, Rev 1&lt;/filterUpTags>
  &lt;filterDownTags>Japan, Beta, Proto, France&lt;/filterDownTags>
  &lt;includeTags>Europe, USA&lt;/includeTags>
  &lt;excludeTags>Japan&lt;/excludeTags>
&lt;/collection>

&lt;!-- Sega ROMS -->
&lt;collection name="Sega Mega Drive NoIntro" shortname="genesis">
  &lt;ROMsSource>/home/xbmc/roms/roms-sega-genesis/&lt;/ROMsSource>
  &lt;ROMsDest>/home/xbmc/NUC/ROMs/roms-sega-genesis/&lt;/ROMsDest>

  &lt;filterUpTags>Europe, World, Rev 1&lt;/filterUpTags>
  &lt;filterDownTags>Japan, Beta, Proto&lt;/filterDownTags>
  &lt;includeTags>Europe, USA&lt;/includeTags>
  &lt;excludeTags>Japan&lt;/excludeTags>
&lt;/collection>
&lt;/ROMcollections>
</programlisting>
</sect2>

<para>Every ROM collection requires a &lt;collection&gt; tag. The attribute
<emphasis>shortname</emphasis> defines the name of this collection used
with the commands. <emphasis>name</emphasis> defines a longer name to
better describe this ROM collection (useful when you have many collection
or different collections for the same ROM set with different filtering 
options).</para>

<para>&lt;ROMsSource&gt; defines the source directory, where you have all the
ROMs in your collection. &lt;ROMsDest&gt; defines the destination directory
where you ROMs will be copied after applying the filters. Both tags are
mandatory for every collection</para>

<sect3>
<title>Understanding filters</title>

<para>To use xru-console, your ROM collection needs to have the No-Intro
naming conventions.</para>

<tip>
<para>If you have a ROM collection with different naming (TOSEC, Goodtools, or
completely random names) then you can rename your ROMs with a ROM manager like
CLRMamePro, ROM Vault, or Advanced Tools</para>
</tip>

<para>For example, a No-Intro collection for the Sega Mega Drive
may look like this</para>

<screen>
Super Mario All-Stars and Super Mario World (Europe).zip
Super Mario All-Stars (Europe).zip
Super Mario All-Stars (USA).zip
Super Mario World (Europe) (Rev 1).zip
Super Mario World (Europe).zip
Super Mario World (Japan) (En) (Arcade) [b].zip
Super Mario World (USA).zip
Super Mario - Yossy Island (Japan) (Rev 1).zip
Super Mario - Yossy Island (Japan) (Rev 2).zip
Super Mario - Yossy Island (Japan).zip
</screen>

<para>Every ROM in the collection has a base-name and then one or
more tags. Every single tag is inside parenthesis and the most common
tags are the ROM region: Europe, USA and Japan. Some ROMs maye have
complex tags, separated with commans, as in the following example.</para>

<screen>
Super Solitaire (Europe) (En,Fr,De,Es,It) (Proto).zip
Super Solitaire (USA) (En,Fr,De,Es,It).zip
</screen>

<para>XRU is able to remove all the tags from the ROM name, and complex
tags are also separated into simpler tags.</para>

<para>For every game there are usually several ROMs, mainly released in
different regions (Europe, USA, or Japan). In your XBMC launcher ideally you
only want one ROM for every game, corresponding to the ROMs in your favorite
regions. Also, there may be several released version of your ROM.</para>

<para>XRU makes two passes when filtering your ROMs. Firstly, tags are
removed from the ROM name, and all ROMs that have a common name are
grouped together. This is roughly like groupin ROMS into parent/clone
set. Note that the order of the ROMs in every set is arbitrary.</para>

<screen>
"Super Mario All-Stars and Super Mario World"
  Super Mario All-Stars and Super Mario World (Europe).zip | (Europe)

"Super Mario All-Stars"
  Super Mario All-Stars (Europe).zip | (Europe)
  Super Mario All-Stars (USA).zip | (USA)

"Super Mario World"
  Super Mario World (Europe) (Rev 1).zip | (Europe), (Rev 1)
  Super Mario World (Europe).zip | (Europe)
  Super Mario World (Japan) (En) (Arcade) [b].zip | (Japan), (En), (Arcade)
  Super Mario World (USA).zip | (USA)

"Super Mario - Yossy Island"
  Super Mario - Yossy Island (Japan) (Rev 1).zip | (Japan), (Rev 1)
  Super Mario - Yossy Island (Japan) (Rev 2).zip | (Japan), (Rev 2)
  Super Mario - Yossy Island (Japan).zip | (Japan)
</screen>

<para>The first pass of the filtering uses the configuration tags
&lt;filterUpTags> and &lt;filterDownTags>. For every tag you configure, 
separated with commas, the ROMs in every parent/clone set will get one
point. Following with the example, if we define the following filter,</para>

<programlisting>
&lt;filterUpTags>Europe, World, Rev 1&lt;/filterUpTags>
&lt;filterDownTags>Japan, Beta, Proto, France&lt;/filterDownTags>
</programlisting>

<para>Then the scores will be,</para>

<screen>
"Super Mario All-Stars and Super Mario World"
  1 | Super Mario All-Stars and Super Mario World (Europe).zip | (Europe)

"Super Mario All-Stars"
  1 | Super Mario All-Stars (Europe).zip | (Europe)
  0 | Super Mario All-Stars (USA).zip | (USA)

"Super Mario World"
  2 | Super Mario World (Europe) (Rev 1).zip | (Europe), (Rev 1)
  1 | Super Mario World (Europe).zip | (Europe)
 -1 | Super Mario World (Japan) (En) (Arcade) [b].zip | (Japan), (En), (Arcade)
  0 | Super Mario World (USA).zip | (USA)

"Super Mario - Yossy Island"
  0 | Super Mario - Yossy Island (Japan) (Rev 1).zip | (Japan), (Rev 1)
 -1 | Super Mario - Yossy Island (Japan) (Rev 2).zip | (Japan), (Rev 2)
 -1 | Super Mario - Yossy Island (Japan).zip | (Japan)
</screen>

<para>So, the first pass of the filter takes the ROM with highest score on every
set. If more than one ROM have the same highest score, then the first ROM in the
list is selected. Following with the example, after the first filter the ROM
collection will look like,</para>

<screen>
"Super Mario All-Stars and Super Mario World"
  1 | Super Mario All-Stars and Super Mario World (Europe).zip | (Europe)

"Super Mario All-Stars"
  1 | Super Mario All-Stars (Europe).zip | (Europe)

"Super Mario World"
  2 | Super Mario World (Europe) (Rev 1).zip | (Europe), (Rev 1)

"Super Mario - Yossy Island"
  0 | Super Mario - Yossy Island (Japan) (Rev 1).zip | (Japan), (Rev 1)
</screen>

<para>The second part of the filtering process allows you to remove
unwanted ROMs. Typically, users in Europe or USA don't want ROMs from Japan
at all. To remove ROMs belonging to the Japanese region configure,</para>

<programlisting>
&lt;includeTags>Europe, USA&lt;/includeTags>
&lt;excludeTags>Japan&lt;/excludeTags>
</programlisting>

<para>This filter will exclude all ROMs with the tag Japan, but only if the
ROM has not the tags Europe or USA. This is not to filter out ROMs with
tags like (Japan, USA) or (Japan, Europe). After the filtering
process, the list of ROMs to be copied to the destiation directory
will look like,</para>

<screen>
"Super Mario All-Stars and Super Mario World"
  1 | Super Mario All-Stars and Super Mario World (Europe).zip | (Europe)

"Super Mario All-Stars"
  1 | Super Mario All-Stars (Europe).zip | (Europe)

"Super Mario World"
  2 | Super Mario World (Europe) (Rev 1).zip | (Europe), (Rev 1)
</screen>

<para>The list of tags for every ROM collection can be displayed with the
<emphasis>list-tags</emphasis> command, which also prints how many ROMs
in the collection have that tag. For example</para>

<screen>
$ ./xru-console.py list-tags snes
XBMC ROM utilities - Console ROMs version 0.1.0
[Parsing config file]
[Listing tags]
 Filter name = snes
[Tag histogram]
...
   104  Fr
   120  En
   173  Rev 1
   191  BS
   220  Beta
   626  Europe
   968  USA
  1925  Japan
</screen>
</sect3>

<sect3>
<title>No-Intro One ROM-One Game (1R1G) DATs</title>

</sect3>

<sect3>
<title>Art Work</title>


</sect3>

<sect2>
<title>xru-mame</title>

<para>Write me.</para>

</sect2>

<sect2>
<title>xru-launcher-AL</title>

<para>Write me.</para>

</sect2>
</sect1>

<sect1>
<title>Examples</title>

<sect2>
<title>Filtering and copying a console ROM collection</title>

</sect2>

<sect2>
<title>Filtering and copying a MAME ROM set</title>

</sect2>

<sect2>
<title>Checking Advanced Launcher configuration</title>

</sect2>
</sect1>
  
<sect1>
<title>TODO</title>

<itemizedlist mark='bullet'>
<listitem><para>Nothing.</para></listitem>
</itemizedlist>
</sect1>

<sect1>
<title>Changelog</title>

<sect2>
<title>Version 0.1</title>
</sect2>
<para>Released on Jul 2014.</para>

<itemizedlist mark='bullet'>
<listitem>
<para>Initial release.</para>
</listitem>
</itemizedlist>
</sect1>

</article>
