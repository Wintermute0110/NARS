<?xml version="1.0" encoding="UTF-8"?>
<article xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en" 
  id="XRU-manual">

<title>XBMC ROM utilities</title>
<articleinfo>
  <author>
    <surname>Wintermute0110</surname>
    <affiliation>
      <address><email>wintermute0110@gmail.com</email></address>
    </affiliation>
  </author>
  <copyright>
    <year>2014</year>
    <holder role="mailto:wintermute0110@gmail.com">Wintermute0110</holder>
  </copyright>
  <releaseinfo>XBMC ROM utilities 0.1</releaseinfo>
</articleinfo>

<sect1>
<title>Introduction</title>

<para>
XBMC ROM utilities (XRU) is a set of Python scripts that allow you to filter your ROM 
collections and artwork to be used with the XBMC launcher plugins like Advanced Launcher 
or ROM Collection Browser. Also, if the ROM collections are updated or a new version of 
the emulators installed (which may require some new ROMs to be updated) XRU is able to 
synchronise the XBMC launchers with the new ROMs quickly and effectively.
</para>

<para>
XRU includes three programs

<itemizedlist mark='bullet'>
<listitem><para>
<application>xru-console</application> filters a ROM collection with No-Intro naming conventions and copy 
the filtered list to the destination directory of your choice. Multiple ROM collections, 
each with a different filter, can be configured. Also, if artwork is available, it may 
also be synchronised.
</para></listitem>

<listitem><para>
<application>xru-mame</application> takes the MAME-generated XML game database 
and merges it with <filename>Catver.ini</filename>. Then, 
a set of filters can be defined (for example, to remove mechanical games) so filtered 
ROMs are copied to different destination directories. It also creates NFO files with 
game information and copies local artwork if available.
</para></listitem>
<listitem><para>
<application>xru-launcher-AL</application> parses XBMC's Advanced Launcher configuration file and scans your 
ROM collections for missing ROMs. It prints a report with the launchers you have to update.
</para></listitem>
</itemizedlist>
</para>
</sect1>

<sect1>
<title>xru-console</title>

<para><application>xru-console</application> requires a mandatory command to 
specify the main action to do. Optionally, some commands can be modified with options. Several command also require a 
<userinput>filterName</userinput></para>

<screen>
$ xru-console.py [-options] command [filterName]
</screen>

<para>The following commands are supported,</para>

<itemizedlist mark='bullet'>
<listitem>
<para><userinput>usage</userinput></para>
<para>prints a summary of the commands and options</para>
</listitem>

<listitem>
<para><userinput>list</userinput></para>
<para>list every ROM set system defined in the configuration file and 
some basic information. Use <userinput>--verbose</userinput> to get more 
information.</para>
</listitem>

<listitem>
<para><userinput>list-nointro &lt;filterName&gt;</userinput></para>
<para>list every ROM set system defined in the No-Intro DAT file.</para>
</listitem>

<listitem>
<para><userinput>check-nointro &lt;filterName&gt;</userinput></para>
<para>scan the source directory and reads No-Intro XML data file. 
Checks if you have all the ROMs and reports the number of missing 
ROMs.</para>
</listitem>

<listitem>
<para><userinput>list-tags &lt;filterName&gt;</userinput></para>
<para>scan the source directory and reports the total number 
of ROM files, all the tags found, and the number of ROMs 
that have each tag. It also display tagless ROMs.</para>
</listitem>

<listitem>
<para><userinput>copy &lt;filterName&gt;</userinput></para>
<para>applies the ROM filters defined in the configuration file and 
copies the contents of the source directory into the destination directory. 
This always overwrites ROMs in the destination directory and may take a 
long time for huge ROM collections and network-mounted destination 
directories.</para>
</listitem>

<listitem>
<para><userinput>update &lt;filterName&gt;</userinput></para>
<para>is like copy, but only copies ROMs if file sizes are different. 
This may save a lot of time.</para>
</listitem>
</itemizedlist>

<para>The following options are supported.</para>

<itemizedlist>
<listitem>
<para><userinput>-h, --help</userinput></para>
<para>print a short command reference</para>
</listitem>

<listitem>
<para><userinput>-v, --verbose</userinput></para>
<para>print more information about what's going on.</para>
</listitem>

<listitem>
<para><userinput>-l, --log</userinput></para>
<para>save program output in <filename>xru-console-log.txt</filename>.</para>
</listitem>

<listitem>
<para><userinput>--logto &lt;logName&gt;</userinput></para>
<para>save program output in the file you specify.</para>
</listitem>

<listitem>
<para><userinput>--dryRun</userinput></para>
<para>don't modify the destination directory at all, just print the operations
to be done.</para>
</listitem>

<listitem>
<para><userinput>--cleanNFO</userinput></para>
<para>deletes redundant NFO files in destination directory.</para>
</listitem>

<listitem>
<para><userinput>--withArtWork</userinput></para>
<para>copies/updates art work (fanart and thumbs) for the launchers.</para>
</listitem>

<listitem>
<para><userinput>--cleanROMs</userinput></para>
<para>deletes ROMs in the destination directory not present in the filtered 
ROM list.</para>
</listitem>

<listitem>
<para><userinput>--cleanArtWork</userinput></para>
<para>deletes thumbs and fanart in the artwork destination directories not 
present in the filtered ROM list.</para>
</listitem>
</itemizedlist>

<sect2>
<title>Configuration file</title>

<para><application>xru-console</application> requires a configuration file,
named <filename>xru-console-config.xml</filename>, 
where you store the directories and filters for every ROM set. A typical 
configuration filter looks like this</para>

<programlisting>
&lt;!-- Example configuration file for XBMC ROM utilities -->
&lt;ROMcollections>

&lt;!-- Nintendo ROMS -->
&lt;collection name="SNES NoIntro" shortname="snes">
  &lt;NoIntroDat>/home/xbmc/roms/DATs/Nintendo - SNES Parent-Clone (20140608-202038).dat&lt;/NoIntroDat>
  &lt;ROMsSource>/home/xbmc/roms/roms-nintendo-snes/&lt;/ROMsSource>
  &lt;ROMsDest>/home/xbmc/NUC/ROMs/roms-nintendo-snes/&lt;/ROMsDest>

  &lt;ThumbsSource>/home/xbmc/roms/ArtWork/nintendo-snes-boxes/&lt;/ThumbsSource>
  &lt;FanartSource>/home/xbmc/roms/ArtWork/nintendo-snes-snaps/&lt;/FanartSource>
  &lt;ThumbsDest>/home/xbmc/NUC/ROMs/ArtWork/nintendo-snes-thumbs/&lt;/ThumbsDest>
  &lt;FanartDest>/home/xbmc/NUC/ROMs/ArtWork/nintendo-snes-fanart/&lt;/FanartDest>

  &lt;filterUpTags>Europe, World, Rev 1&lt;/filterUpTags>
  &lt;filterDownTags>Japan, Beta, Proto, France&lt;/filterDownTags>
  &lt;includeTags>Europe, USA&lt;/includeTags>
  &lt;excludeTags>Japan&lt;/excludeTags>
&lt;/collection>

&lt;!-- Sega ROMS -->
&lt;collection name="Sega Mega Drive NoIntro" shortname="genesis">
  &lt;ROMsSource>/home/xbmc/roms/roms-sega-genesis/&lt;/ROMsSource>
  &lt;ROMsDest>/home/xbmc/NUC/ROMs/roms-sega-genesis/&lt;/ROMsDest>

  &lt;filterUpTags>Europe, World, Rev 1&lt;/filterUpTags>
  &lt;filterDownTags>Japan, Beta, Proto&lt;/filterDownTags>
  &lt;includeTags>Europe, USA&lt;/includeTags>
  &lt;excludeTags>Japan&lt;/excludeTags>
&lt;/collection>
&lt;/ROMcollections>
</programlisting>

<para>Every ROM collection requires a <userinput>&lt;collection&gt;</userinput> 
tag. The attribute
<userinput>shortname</userinput> defines the name of this collection used
with the commands. <userinput>name</userinput> defines a longer name to
better describe this ROM collection (useful when you have many collection
or different collections for the same ROM set with different filtering 
options).</para>

<para><userinput>&lt;ROMsSource&gt;</userinput> defines the source directory, where you have all the
ROMs in your collection. <userinput>&lt;ROMsDest&gt;</userinput> defines the destination directory
where you ROMs will be copied after applying the filters. Both tags are
mandatory for every ROM collection.</para>
</sect2>

<sect2>
<title>Understanding No-Intro collection filters</title>

<para>To use <application>xru-console</application>, your ROM collection needs 
to have the No-Intro naming conventions.</para>

<tip>
<para>If you have a ROM collection with different naming (TOSEC, Goodtools, or
completely random names) then you can rename your ROMs with a ROM manager like
CLRMamePro, ROM Vault, or Advanced Tools</para>
</tip>

<para>For example, a No-Intro collection for the Sega Mega Drive
may look like this</para>

<programlisting>
Super Mario All-Stars and Super Mario World (Europe).zip
Super Mario All-Stars (Europe).zip
Super Mario All-Stars (USA).zip
Super Mario World (Europe) (Rev 1).zip
Super Mario World (Europe).zip
Super Mario World (Japan) (En) (Arcade) [b].zip
Super Mario World (USA).zip
Super Mario - Yossy Island (Japan) (Rev 1).zip
Super Mario - Yossy Island (Japan) (Rev 2).zip
Super Mario - Yossy Island (Japan).zip
</programlisting>

<para>Every ROM in the collection has a base-name and then one or
more tags. Every single tag is inside parenthesis and the most common
tags are the ROM region: Europe, USA and Japan. Some ROMs maye have
complex tags, separated with commans, as in the following example.</para>

<programlisting>
Super Solitaire (Europe) (En,Fr,De,Es,It) (Proto).zip
Super Solitaire (USA) (En,Fr,De,Es,It).zip
</programlisting>

<para>XRU is able to remove all the tags from the ROM name, and complex
tags are also separated into simpler tags.</para>

<para>For every game there are usually several ROMs, mainly released in
different regions (Europe, USA, or Japan). In your XBMC launcher ideally you
only want one ROM for every game, corresponding to the ROMs in your favorite
regions. Also, there may be several released version of your ROM.</para>

<para>XRU makes two passes when filtering your ROMs. Firstly, tags are
removed from the ROM name, and all ROMs that have a common name are
grouped together. This is roughly like groupin ROMS into parent/clone
set. Note that the order of the ROMs in every set is arbitrary.</para>

<programlisting>
&lt;pcloneList> "Super Mario All-Stars and Super Mario World"
  Super Mario All-Stars and Super Mario World (Europe).zip | (Europe)

&lt;pcloneList> "Super Mario All-Stars"
  Super Mario All-Stars (Europe).zip                       | (Europe)
  Super Mario All-Stars (USA).zip                          | (USA)

&lt;pcloneList> "Super Mario World"
  Super Mario World (Europe) (Rev 1).zip                   | (Europe), (Rev 1)
  Super Mario World (Europe).zip                           | (Europe)
  Super Mario World (Japan) (En) (Arcade) [b].zip          | (Japan), (En), (Arcade)
  Super Mario World (USA).zip                              | (USA)

&lt;pcloneList> "Super Mario - Yossy Island"
  Super Mario - Yossy Island (Japan) (Rev 1).zip           | (Japan), (Rev 1)
  Super Mario - Yossy Island (Japan) (Rev 2).zip           | (Japan), (Rev 2)
  Super Mario - Yossy Island (Japan).zip                   | (Japan)
</programlisting>

<para>The first pass of the filtering uses the configuration tags
&lt;filterUpTags> and &lt;filterDownTags>. For every tag you configure, 
separated with commas, the ROMs in every parent/clone set will get one
point. Following with the example, if we define the following filter,</para>

<programlisting>
&lt;filterUpTags>Europe, World, Rev 1&lt;/filterUpTags>
&lt;filterDownTags>Japan, Beta, Proto, France&lt;/filterDownTags>
</programlisting>

<para>Then the scores will be,</para>

<programlisting>
"Super Mario All-Stars and Super Mario World"
  1 | Super Mario All-Stars and Super Mario World (Europe).zip | (Europe)

"Super Mario All-Stars"
  1 | Super Mario All-Stars (Europe).zip                       | (Europe)
  0 | Super Mario All-Stars (USA).zip                          | (USA)

"Super Mario World"
  2 | Super Mario World (Europe) (Rev 1).zip                   | (Europe), (Rev 1)
  1 | Super Mario World (Europe).zip                           | (Europe)
 -1 | Super Mario World (Japan) (En) (Arcade) [b].zip          | (Japan), (En), (Arcade)
  0 | Super Mario World (USA).zip                              | (USA)

"Super Mario - Yossy Island"
  0 | Super Mario - Yossy Island (Japan) (Rev 1).zip           | (Japan), (Rev 1)
 -1 | Super Mario - Yossy Island (Japan) (Rev 2).zip           | (Japan), (Rev 2)
 -1 | Super Mario - Yossy Island (Japan).zip                   | (Japan)
</programlisting>

<para>So, the first pass of the filter takes the ROM with highest score on every
set. If more than one ROM have the same highest score, then the first ROM in the
list is selected. Following with the example, after the first filter the ROM
collection will look like,</para>

<programlisting>
"Super Mario All-Stars and Super Mario World"
  1 | Super Mario All-Stars and Super Mario World (Europe).zip | (Europe)

"Super Mario All-Stars"
  1 | Super Mario All-Stars (Europe).zip                       | (Europe)

"Super Mario World"
  2 | Super Mario World (Europe) (Rev 1).zip                   | (Europe), (Rev 1)

"Super Mario - Yossy Island"
  0 | Super Mario - Yossy Island (Japan) (Rev 1).zip           | (Japan), (Rev 1)
</programlisting>

<para>The second part of the filtering process allows you to remove
unwanted ROMs. Typically, users in Europe or USA don't want ROMs from Japan
at all. To remove ROMs belonging to the Japanese region configure,</para>

<programlisting>
&lt;includeTags>Europe, USA&lt;/includeTags>
&lt;excludeTags>Japan&lt;/excludeTags>
</programlisting>

<para>This filter will exclude all ROMs with the tag Japan, but only if the
ROM has not the tags Europe or USA. This is not to filter out ROMs with
tags like (Japan, USA) or (Japan, Europe). After the filtering
process, the list of ROMs to be copied to the destiation directory
will look like,</para>

<programlisting>
"Super Mario All-Stars and Super Mario World"
  1 | Super Mario All-Stars and Super Mario World (Europe).zip | (Europe)

"Super Mario All-Stars"
  1 | Super Mario All-Stars (Europe).zip | (Europe)

"Super Mario World"
  2 | Super Mario World (Europe) (Rev 1).zip | (Europe), (Rev 1)
</programlisting>

<para>The list of tags for every ROM collection can be displayed with the
<emphasis>list-tags</emphasis> command, which also prints how many ROMs
in the collection have that tag. For example</para>

<screen>
$ ./xru-console.py list-tags snes
XBMC ROM utilities - Console ROMs version 0.1.0
[Parsing config file]
[Listing tags]
 Filter name = snes
[Tag histogram]
...
   104  Fr
   120  En
   173  Rev 1
   191  BS
   220  Beta
   626  Europe
   968  USA
  1925  Japan
</screen>
</sect2>

<sect2>
<title>No-Intro One ROM-One Game (1R1G) DATs</title>

<para>The first pass of the filtering process allows to group several ROMs
belonging to the same game together. However, based only on the ROM names
this process is not perfect and will produce wrong results for some games.
For example, the following games</para>

<programlisting>
WRITE ME
</programlisting>

<para>will be grouped into different</para>

<para>For many users, the basic filtering will be fine. However, this problem
may be solved using the No-Intro One ROM-One Game (1G1R) DATs. A typical
No-Intro DAT looks like this</para>

<programlisting>
game (
  name "Sonic The Hedgehog (Japan, Korea)"
  description "Sonic The Hedgehog (Japan, Korea)"
  rom ( name "Sonic The Hedgehog (Japan, Korea).md" size 524288 crc AFE05EEE md5 09DAD...39C5F )
)

game (
  name "Sonic The Hedgehog (USA, Europe)"
  description "Sonic The Hedgehog (USA, Europe)"
  rom ( name "Sonic The Hedgehog (USA, Europe).md" size 524288 crc F9394E97 md5 1B...93 flags verified )
)
</programlisting>

<para>However, from Dat o Matic a parent/clone list in XML can be downloaded. This is also
referred as a 1G1R list. This is how a 1G1R XML DAT looks</para>

<programlisting>
&lt;game name="Sonic The Hedgehog (USA, Europe)">
  &lt;description>Sonic The Hedgehog (USA, Europe)&lt;/description>
  &lt;release name="Sonic The Hedgehog" region="EUR"/>
  &lt;release name="Sonic The Hedgehog" region="USA"/>
  &lt;rom name="Sonic The Hedgehog (USA, Europe).md" size="524288" crc="F9394E97" md5="1B...93" status="verified"/>
&lt;/game>
&lt;game name="Sonic The Hedgehog (Japan, Korea)" cloneof="Sonic The Hedgehog (USA, Europe)">
  &lt;description>Sonic The Hedgehog (Japan, Korea)&lt;/description>
  &lt;release name="Sonic The Hedgehog" region="JPN"/>
  &lt;release name="Sonic The Hedgehog" region="KOR"/>
  &lt;rom name="Sonic The Hedgehog (Japan, Korea).md" size="524288" crc="AFE05EEE" md5="09DADB...39C5F"/>
&lt;/game>
</programlisting>

<para>If you pay attention, there is a cloneof attribute on every clone ROM in the 
collection. This allows xru-console to make a perfect parent/clone list before applying
filters, and this will produce a better filtered list.</para>

<para>In order to use a No-Intro 1G1R XML with xru-console, you need to configure
the following option for every collection</para>

<programlisting>
&lt;collection&gt;
...
&lt;NoIntroDat&gt;./XBMC-NoIntro-dats/Sega - Genesis Parent-Clone (20140601).dat&lt;/NoIntroDat&gt;
...
&lt;/collection&gt;
</programlisting>

<para>If you specify the NoIntroDat tag, the xru-console will use that DAT file
to build the main parent/clone list. Then, the two pass filtering will be aplied
in the usual way. Finally, your source directory will be scanned and ROMs and
the list of ROMs to be copied created.</para>

<para>NOTE: what happens with ROMs the user does not have?</para>

<para>If you configure the 1G1R XML file, two additional commands
will be available in xr-console. list-nointro &lt;romSetName> lists all the games in the
1G1R DAT, for example.</para>

<screen>
$ ./xru-console.py list-nointro genesis
XBMC ROM utilities - Console ROMs version 0.1.0
[Parsing config file]
[Listing No-Intro XML DAT]
Filter name = genesis
Parsing No-Intro XML DAT
Parsing No-Intro merged XML file ./XBMC-NoIntro-dats/Sega - Genesis Parent-Clone (20140601).dat...  done
...
&lt;game> Sonic The Hedgehog (USA, Europe)
&lt;game> Sonic The Hedgehog (Japan, Korea)
&lt;game> Sonic The Hedgehog 2 (World) (Rev A)
&lt;game> Sonic The Hedgehog 2 (World)
&lt;game> Sonic The Hedgehog 2 (World) (Beta)
&lt;game> Sonic The Hedgehog 3 (Europe)
&lt;game> Sonic The Hedgehog 3 (Japan, Korea)
&lt;game> Sonic The Hedgehog 3 (USA)
...
&lt;game> Zoop (USA)
Number of games = 1681
</screen>

<para>check-nointro &lt;romSetName> will scan you source directory and will report how many ROMs
you have, how many ROMs you don't have (missing ROMs), and how many ROMs you
have no listed in the DAT (unknown ROMs).</para>

<screen>
$ ./xru-console.py check-nointro genesis
XBMC ROM utilities - Console ROMs version 0.1.0
[Parsing config file]
[Checking ROMs with No-Intro XML DAT]
 Filter name = genesis
 Parsing No-Intro XML DAT
 Parsing ./XBMC-NoIntro-dats/Sega - Mega Drive Parent-Clone (20140601).dat...  done
Games in DAT = 1681
Have ROMs    = 1681
Missing ROMs = 0
Unknown ROMs = 47
</screen>

<para>Note that <application>xru-console</application> only looks at the file name of the ROM! It does not
check the CRC like more advanced ROM Managers, for example CRLMamePro or ROM Vault.</para>
</sect2>

<sect2>
<title>Art Work and NFO files</title>

<para>Both Advanced Launcher and ROM Collection Browser have good scrapers
that will download most of the artwork for your ROMs. However, the scraping
process may be very slow for huge ROM collections (for example, a collection having
2,000 ROMs may take 10 hours to scrap). This problem may be solved if you
have locally available collections of artwork. xru-console can copy the
matching artwork for your filtered collection in the directories you specify,
and then you can choose the offline scraper that simply reads those files
from the disk instead of dowloading them from the Internet</para>

<para>To copy the local artwork, the following tags needs to be configured
for every collection</para>

<programlisting>
Write me
</programlisting>

</sect2>
</sect1>

<sect1>
<title>xru-mame</title>

<screen>
$ xru-mame.py [options] &lt;command&gt; [filterName]
</screen>

<para>The following commands are supported.</para>

<itemizedlist mark='bullet'>
<listitem>
<para><userinput>usage</userinput></para>
<para>prints a summary of the commands and options.</para>
</listitem>

<listitem>
<para><userinput>reduce-XML</userinput></para>
<para>Takes MAME XML as input, picks the useful information, and writes an
stripped XML with only meaningful information. The reason for doing this
is because MAME XML file is huge and takes a long time to process it. After
reducing it, all subsequent processing should be much quicker.</para>
</listitem>

<listitem>
<para><userinput>merge</userinput></para>
<para>Takes MAME XML (reduced) info file and Catver.ini and makes an output XML
file with all the necessary information for proper game filtering.</para>
</listitem>

<listitem>
<para><userinput>list-merged</userinput></para>
<para>List every ROM set system defined in the merged MAME XML information file.
Use <userinput>--verbose</userinput> to get more information.</para>
</listitem>

<listitem>
<para><userinput>list-categories</userinput></para>
<para>Reads <filename>Catver.ini</filename> and makes a histogram of the categories (prints all
available categories and tells how many ROMs every category has).</para>
</listitem>

<listitem>
<para><userinput>list-drivers</userinput></para>
<para>Reads merged XML database and prints a histogram of the drivers (how many
games use each driver).</para>
</listitem>


<listitem>
<para><userinput>copy &lt;filterName&gt;</userinput></para>
<para>Applies ROM filters defined in the configuration file and copies the
contents of sourceDir into destDir. This overwrites ROMs in destDir.</para>
</listitem>

<listitem>
<para><userinput>update &lt;filterName&gt;</userinput></para>
<para>Like copy, but only copies files if file size is different (this saves
a lot of time, particularly if sourceDir and/or destDir are on a
network-mounted filesystem).</para>
</listitem>
</itemizedlist>

<para>The following options are supported.</para>

<itemizedlist mark='bullet'>
<listitem>
<para><userinput>-h, --help</userinput></para>
<para>Print short command reference</para>
</listitem>

<listitem>
<para><userinput>-v, --verbose</userinput></para>
<para>Print more information about what's going on</para>
</listitem>

<listitem>
<para><userinput>-l, --log</userinput></para>
<para>Save program output in <filename>xru-mame-log.txt</filename>.</para>
</listitem>

<listitem>
<para><userinput>--logto [logName]</userinput></para>
<para>Save program output in the file you specify.</para>
</listitem>

<listitem>
<para><userinput>--dryRun</userinput></para>
<para>Don't modify destDir at all, just print the operations to be done.</para>
</listitem>

<listitem>
<para><userinput>--generateNFO</userinput></para>
<para>Generates NFO files with game information for the launchers.</para>
</listitem>

<listitem>
<para><userinput>--withArtWork</userinput></para>
<para>Copies/Updates art work: fanart and thumbs for the launchers.</para>
</listitem>

<listitem>
<para><userinput>--cleanROMs</userinput></para>
<para>Deletes ROMs in destDir not present in the filtered ROM list.</para>
</listitem>
</itemizedlist>

<sect2>
<title>Configuration file</title>

<para><application>xru-mame</application> requires a configuration file,
named <filename>xru-mame-config.xml</filename>, 
where you store the ROM directories and filters. A typical 
configuration filter looks like this.</para>

<programlisting>
&lt;!-- Example configuration file for XBMC ROM utilities -->
&lt;MAMEConfig>
&lt;General>
  &lt;MAME_XML>../XBMC-mame/mame-0153.xml&lt;/MAME_XML>
  &lt;MAME_XML_redux>../XBMC-mame/mame-0153-reduced.xml&lt;/MAME_XML_redux>
  &lt;Catver>../XBMC-mame/Catver.ini&lt;/Catver>
    &lt;MergedInfo>../XBMC-mame/mame-0153-merged.xml&lt;/MergedInfo>
&lt;/General>

&lt;MAMEFilter name="main">
  &lt;source>/home/xbmc/roms/roms-mame/&lt;/source>
  &lt;dest>/home/xbmc/NUC/ROMs/roms-mame-main/&lt;/dest>

  &lt;!-- Main filter -->
  &lt;MainFilter>NoClones, NoSamples, NoMechanical&lt;/MainFilter>

  &lt;!-- MAME driver, important drivers
       neogeo    Neo-Geo
       cps1      Capcom CPS1
       cps2      Capcom CPS2
       cps3      Capcom CPS3
  -->
  &lt;Driver>not cps1&lt;/Driver>

  &lt;!-- Categories -->
  &lt;!-- Some catoegories you probably don't want
       PinMAME
       Casino
  -->
  &lt;Categories>no PinMAME, no Casino&lt;/Categories>
&lt;/MAMEFilter>

&lt;MAMEFilter name="cps1">
  &lt;source>/home/xbmc/roms/roms-mame/&lt;/source>
  &lt;dest>/home/xbmc/NUC/ROMs/roms-mame-cps1/&lt;/dest>
  &lt;MainFilter>NoClones, NoSamples, NoMechanical&lt;/MainFilter>
  &lt;Driver>cps1&lt;/Driver>
&lt;/MAMEFilter>
&lt;/MAMEConfig> 
</programlisting>
</sect2>

<sect2>
<title>Understanding MAME filters</title>

<para>test</para>

</sect2>

<sect2>
<title>Art Work and NFO files</title>

<para>test</para>
</sect2>
</sect1>

<sect1>
<title>xru-launcher-AL</title>

<para><application>xru-launcher-AL</application> reads XBMC's Advanced
Launcher configuration file and checks the launchers configured by
the user. It reports if there are missing/unknown ROMs in your
launcher, missing/unknown artwork, and tells what launchers need
to be updated.</para>

<screen>
$ xru-console.py [-options] command [filterName]
</screen>

<para>The following commands are supported,</para>

<itemizedlist mark='bullet'>
<listitem>
<para><userinput>ar</userinput></para>
<para>er</para>
</listitem>
</itemizedlist>

<para>The following options are supported.</para>

<itemizedlist>
<listitem>
<para><userinput>ir</userinput></para>
<para>ur</para>
</listitem>
</itemizedlist>

</sect1>


<sect1>
<title>Examples</title>

<sect2>
<title>Simple filtering of a console ROM collection</title>

<para>You have a No-Intro ROM collection of the Sega Genesis and want to
filter this collection to remove clone ROMs and Japanese ROMs. This is the situation.</para>

<itemizedlist>
<listitem><para>The ROM collection is stored in your desktop computer in 
the directory <filename>/home/wintermute/No-Intro/Sega Genesis/</filename>. 
</para></listitem>

<listitem><para>
XBMC is installed on a dedicated HTPC, whichi uses XBMCbuntu. XBMC runs with user xbmc.</para></listitem>

<listitem><para>The xbmc user's home directory is network-mounted in the desktop computer using FUSE's <application>sshfs</application> in <filename>/home/wintermute/XBMC/</filename>.
</para></listitem>

<listitem><para>You want to store your ROM collection in the HTPC computer in
the directory <filename>/home/xbmc/ROMs/roms-sega-genesis/</filename>. Note that in the desktop computer this directory is <filename>/home/wintermute/XBMC/ROMs/roms-sega-genesis/</filename>.</para></listitem>
</itemizedlist>

</sect2>


<sect2>
<title>Filtering of a console ROM collection with available artwork</title>

<para>You have a No-Intro ROM collection and artwork</para>

</sect2>

<sect2>
<title>Simple filtering of MAME ROMs</title>

<para>para</para>

</sect2>

<sect2>
<title>Splitting MAME ROMs into several launchers</title>

</sect2>

<sect2>
<title>Checking Advanced Launcher configuration</title>

</sect2>
</sect1>

<!--  
<sect1>
<title>TODO</title>

<itemizedlist mark='bullet'>
<listitem><para>Nothing.</para></listitem>
</itemizedlist>
</sect1>
-->

<sect1>
<title>Changelog</title>

<sect2>
<title>Version 0.1</title>
</sect2>
<para>Released on Jul 2014.</para>

<itemizedlist mark='bullet'>
<listitem>
<para>Initial release.</para>
</listitem>
</itemizedlist>
</sect1>

</article>
