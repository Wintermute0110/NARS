<?xml version="1.0" encoding="UTF-8"?>
<article xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en" 
         id="XRU-manual">

<!-- ======================================================================= -->
<title>XBMC ROM utilities</title>
<articleinfo>
  <author>
    <surname>Wintermute0110</surname>
    <email>wintermute0110@gmail.com</email>
  </author>
  <copyright>
    <year>2014</year>
    <holder role="mailto:wintermute0110@gmail.com">Wintermute0110</holder>
  </copyright>
  <releaseinfo>XBMC ROM utilities 0.1</releaseinfo>
</articleinfo>

<!-- ======================================================================= -->
<sect1>
<title>Introduction</title>

<para>XBMC ROM utilities (XRU) is a set of Python scripts that allows you to filter
your ROM collections to remove unwanted ROMs from XBMC's launcher plugins like
Advanced Launcher, ROM Collection Browser, or any other front-end. If the ROM
collections are updated or a new version of the emulators installed (which may
require some new ROMs to be updated) XRU is able to synchronise the ROM
directories of your HTPC quickly and effectively.</para>

<para>XRU includes three programs</para>

<itemizedlist mark='bullet'>
<listitem><para>
<application>xru-console</application> filters a ROM collection with No-Intro names and copies
the filtered list to the destination directory of your choice. Multiple ROM
collections, each with a different filter, can be configured. Multiple filters
can be configured to the same ROM collection, for example to split the ROMs
into USA, Europe and Japan regions. Also, if artwork is available, it may also
be synchronised.
</para></listitem>

<listitem><para>
<application>xru-mame</application> takes the MAME-generated XML game database and merges it
with <filename>Catver.ini</filename>. Then, a set of filters can be defined (for example,
to remove mechanical games or select games that use a lightgun) and filtered
ROMs are copied to different destination directories. It also creates NFO files
with game information for launchers and copies local artwork if available so
offline scrapers can be used.
</para></listitem>

<listitem><para>
<application>xru-launcher-AL</application> parses XBMC's Advanced Launcher configuration file and scans your
ROM launchers for missing ROMs. It prints a report with the launchers you have to update.
</para></listitem>
</itemizedlist>
</sect1>

<!-- ======================================================================= -->
<sect1>
<title><application>xru-console</application></title>

<para><application>xru-console</application> requires a mandatory command to 
specify the main action to do. Several commands also require a 
<userinput>filterName</userinput>. Optionally, some command actions can be 
modified with options.</para>

<screen>
$ xru-console.py [-options] command [filterName]
</screen>

<para>The following commands are supported.</para>

<itemizedlist mark='bullet'>
<listitem>
<para><userinput>usage</userinput></para>
<para>Prints a summary of the commands and options.</para>
</listitem>

<listitem>
<para><userinput>list</userinput></para>
<para>Lists every ROM set system defined in the configuration file and 
some basic information. Use <userinput>--verbose</userinput> to get more 
information.</para>
</listitem>

<listitem>
<para><userinput>list-nointro &lt;filterName&gt;</userinput></para>
<para>Lists every ROM defined in the No-Intro DAT file.</para>
</listitem>

<listitem>
<para><userinput>check-nointro &lt;filterName&gt;</userinput></para>
<para>Scans the source directory and reads the No-Intro XML data file. 
Checks if you have all the ROMs defined in the No-INTRO DAT and reports the 
number of missing and unknown ROMs.</para>
</listitem>

<listitem>
<para><userinput>list-tags &lt;filterName&gt;</userinput></para>
<para>Scans the source directory and reports the total number 
of ROM files, all the tags found, and the number of ROMs 
that have each tag. It also display ROMs without any tag.</para>
</listitem>

<listitem>
<para><userinput>check-filter &lt;filterName&gt;</userinput></para>
<para>Applies ROM filters defined in the configuration file and prints a list of
the scored ROMs.
used.
</para>
</listitem>

<listitem>
<para><userinput>copy &lt;filterName&gt;</userinput></para>
<para>Applies the ROM filters defined in the configuration file and 
copies the contents of the source directory into the destination directory. 
This always overwrites ROMs in the destination directory and may take a 
long time for huge ROM collections and network-mounted destination 
directories.</para>
</listitem>

<listitem>
<para><userinput>update &lt;filterName&gt;</userinput></para>
<para>Like copy, but only copies ROMs if file sizes are different. 
This may save a lot of time.</para>
</listitem>

<listitem>
<para><userinput>check-artwork &lt;filterName&gt;</userinput></para>
<para>Reads the ROMs in destDir, checks if you have the corresponding artwork
files, and prints a report.</para>
</listitem>

<listitem>
<para><userinput>copy-artwork &lt;filterName&gt;</userinput></para>
<para>Reads the ROMs in destDir and tries to copy the matching artwork to 
the destination directory.</para>
</listitem>

<listitem>
<para><userinput>update-artwork &lt;filterName&gt;</userinput></para>
<para>Like copy-artwork, but only copies images if file sizes are different. 
This may save a lot of time.</para>
</listitem>
</itemizedlist>

<para>The following options are supported.</para>

<itemizedlist>
<listitem>
<para><userinput>-h, --help</userinput></para>
<para>Prints a short command reference</para>
</listitem>

<listitem>
<para><userinput>-v, --verbose</userinput></para>
<para>Prints more information about what's going on. Can be used several
times to get even more information.</para>
</listitem>

<listitem>
<para><userinput>-l, --log</userinput></para>
<para>Saves program output in <filename>xru-console-log.txt</filename>.</para>
</listitem>

<listitem>
<para><userinput>--logto &lt;logName&gt;</userinput></para>
<para>Saves program output in the file you specify.</para>
</listitem>

<listitem>
<para><userinput>--dryRun</userinput></para>
<para>don't modify the destination directory at all, just print the operations
to be done.</para>
</listitem>

<listitem>
<para><userinput>--cleanROMs</userinput></para>
<para>Deletes ROMs in the destination directory not present in the filtered 
ROM list (unknown ROMs).</para>
</listitem>

<listitem>
<para><userinput>--cleanNFO</userinput></para>
<para>Deletes redundant NFO files in destination directory (unknown NFO 
files).</para>
</listitem>

<listitem>
<para><userinput>--cleanArtWork</userinput></para>
<para>Deletes thumbs and fanart in the artwork destination directories not 
present in the artwork list (unknown Artwork).</para>
</listitem>
</itemizedlist>

<sect2>
<title>Configuration file</title>

<para><application>xru-console</application> requires a configuration file,
named <filename>xru-console-config.xml</filename>, where you store the 
directories and filters for every ROM set you want to filter. The configuration
filter is an XML file. A typical configuration filter looks like this.</para>

<programlisting>
&lt;!-- Example configuration file for XBMC ROM utilities -->
&lt;ROMcollections>

&lt;!-- Nintendo ROMS -->
&lt;collection name="SNES NoIntro" shortname="snes">
  &lt;NoIntroDat>/home/xbmc/roms/DATs/SNES Parent-Clone (20140608-202038).dat&lt;/NoIntroDat>
  &lt;ROMsSource>/home/xbmc/roms/roms-nintendo-snes/&lt;/ROMsSource>
  &lt;ROMsDest  >/home/xbmc/NUC-remote/ROMs/roms-nintendo-snes/&lt;/ROMsDest>

  &lt;ThumbsSource>/home/xbmc/roms/ArtWork/nintendo-snes-boxes/&lt;/ThumbsSource>
  &lt;FanartSource>/home/xbmc/roms/ArtWork/nintendo-snes-snaps/&lt;/FanartSource>
  &lt;ThumbsDest  >/home/xbmc/NUC-remote/ROMs/ArtWork/nintendo-snes-thumbs/&lt;/ThumbsDest>
  &lt;FanartDest  >/home/xbmc/NUC-remote/ROMs/ArtWork/nintendo-snes-fanart/&lt;/FanartDest>

  &lt;filterUpTags>Europe, World, Rev 1&lt;/filterUpTags>
  &lt;filterDownTags>Japan, Beta, Proto, France&lt;/filterDownTags>
  &lt;includeTags>Europe, USA&lt;/includeTags>
  &lt;excludeTags>Japan&lt;/excludeTags>
&lt;/collection>

&lt;!-- Sega ROMS -->
&lt;collection name="Sega Mega Drive NoIntro" shortname="genesis">
  &lt;ROMsSource>/home/xbmc/roms/roms-sega-genesis/&lt;/ROMsSource>
  &lt;ROMsDest  >/home/xbmc/NUC-remote/ROMs/roms-sega-genesis/&lt;/ROMsDest>

  &lt;filterUpTags>Europe, World, Rev 1&lt;/filterUpTags>
  &lt;filterDownTags>Japan, Beta, Proto&lt;/filterDownTags>
  &lt;includeTags>Europe, USA&lt;/includeTags>
  &lt;excludeTags>Japan&lt;/excludeTags>
&lt;/collection>
&lt;/ROMcollections> 
</programlisting>

<para>Every ROM collection filter requires a <userinput>&lt;collection&gt;</userinput> 
tag. The attribute <userinput>shortname</userinput> defines the name of this 
collection to be used with the commands that require a <userinput>&lt;filterName&gt;</userinput>. 
<userinput>name</userinput> attribute defines a longer name to better describe 
this ROM collection filter and it is useful if you setup different filters 
for the same ROM set.
<userinput>&lt;ROMsSource&gt;</userinput> defines the source directory 
where you have all the ROMs in your collection. 
<userinput>&lt;ROMsDest&gt;</userinput> defines the destination directory
where you filtered ROMs will be copied. Both tags are mandatory for every 
ROM collection filter.</para>
</sect2>

<sect2>
<title>Understanding ROM filters</title>

<para>To use <application>xru-console</application>, your ROM collection needs 
to have the No-Intro naming conventions. Only ROMs in 
<userinput>.zip</userinput> are currently supported.</para>

<tip>
<para>If you have a ROM collection with different naming (TOSEC, Goodtools, or
completely random names) then you can rename your ROMs with a ROM manager like
CLRMamePro or ROM Vault.</para>
</tip>

<para>For example, a (very abridged) No-Intro collection for the Super Nintendo 
may look like this.</para>

<programlisting>
Super Mario All-Stars and Super Mario World (Europe).zip
Super Mario All-Stars + Super Mario World (USA)
Super Mario World (Europe) (Rev 1).zip
Super Mario World (Europe).zip
Super Mario World (Japan) (En) (Arcade) [b].zip
Super Mario World (USA).zip
Super Mario - Yossy Island (Japan) (Rev 1).zip
Super Mario - Yossy Island (Japan) (Rev 2).zip
Super Mario - Yossy Island (Japan).zip
</programlisting>

<para>Every ROM in the collection has a base-name and then one or
more tags. Every single tag is inside parenthesis and the most common
tags are the region where the ROM belongs: 
<userinput>Europe</userinput>, <userinput>USA</userinput> 
and/or <userinput>Japan</userinput>. Some ROMs may have complex tags, separated 
with commas, as in the following example.</para>

<programlisting>
Super Solitaire (Europe) (En,Fr,De,Es,It) (Proto).zip
Super Solitaire (USA) (En,Fr,De,Es,It).zip
</programlisting>

<para><application>xru-console</application> is able to remove all the tags 
from the ROM name and complex tags are also separated into simpler tags.</para>

<para>For every game in the ROM collection there are usually several ROMs, 
mainly released in different regions (Europe, USA, or Japan). In your XBMC 
launcher ideally you only want one ROM for every game, corresponding to the 
ROMs in your favourite region (or regions). Also, there may be several released 
version of your ROM and you just want to play the best available one.</para>

<para><application>xru-console</application> makes two passes when filtering 
the ROMs in the source directory. Firstly, tags are removed from the ROM name, 
and all ROMs that have a common name after tag removal are grouped together.
This is roughly like grouping ROMs into a parent/clone set. Note that the order 
of the ROMs in every set is arbitrary. For example, the SNES ROMs in the
example above will be grouped like this.</para>

<programlisting>
&lt;pcloneList> "Super Mario All-Stars and Super Mario World"
  Super Mario All-Stars and Super Mario World (Europe).zip | (Europe)

&lt;pcloneList> "Super Mario All-Stars + Super Mario World"
  Super Mario All-Stars + Super Mario World (USA).zip      | (USA)

&lt;pcloneList> "Super Mario World"
  Super Mario World (Europe) (Rev 1).zip                   | (Europe), (Rev 1)
  Super Mario World (Europe).zip                           | (Europe)
  Super Mario World (Japan) (En) (Arcade) [b].zip          | (Japan), (En), (Arcade)
  Super Mario World (USA).zip                              | (USA)

&lt;pcloneList> "Super Mario - Yossy Island"
  Super Mario - Yossy Island (Japan) (Rev 1).zip           | (Japan), (Rev 1)
  Super Mario - Yossy Island (Japan) (Rev 2).zip           | (Japan), (Rev 2)
  Super Mario - Yossy Island (Japan).zip                   | (Japan)
</programlisting>

<para>The first pass of the filtering process uses the configured labels
<userinput>&lt;filterUpTags></userinput> and 
<userinput>&lt;filterDownTags></userinput>. For every tag you write inside
<userinput>&lt;filterUpTags></userinput>, separated with commas, every ROM on 
every parent/clone set will get some points. For example, if you write 
this.</para>

<programlisting>
&lt;filterUpTags>Europe, World, Rev 1&lt;/filterUpTags>
</programlisting>

<para>Then ROMs having the <emphasis>Europe</emphasis> tag will get 3 points, ROMs
having the <emphasis>World</emphasis> tag will get 2 points, and ROMs having
the <emphasis>Rev 1</emphasis> tag will get one point. If a ROM has several
wanted tags then it will get more points. Note that the tags you want more
should be placed first.</para>

<para>The <userinput>&lt;filterDownTags></userinput> filters works in a similar
way, but instead of adding points to the score it subtracts points. For 
example, the following filter.</para>

<programlisting>
&lt;filterDownTags>Japan, Beta, Proto, France&lt;/filterDownTags>
</programlisting>

<para>Will subtract -4 points for ROMs having the tag <emphasis>Japan</emphasis>,
-3 points for the ROMs having the tag <emphasis>Beta</emphasis>, and so on. In
the case of this filter, you specify ROMs you don not want first. Following with 
the example, if the filters are applied to our ROM list, then the scores will 
be.</para>

<programlisting>
&lt;pcloneList> "Super Mario All-Stars and Super Mario World"
  3 | Super Mario All-Stars and Super Mario World (Europe).zip | (Europe)

&lt;pcloneList> "Super Mario All-Stars and Super Mario World"
  0 | Super Mario All-Stars + Super Mario World (USA).zip      | (USA)

&lt;pcloneList> "Super Mario World"
  4 | Super Mario World (Europe) (Rev 1).zip                   | (Europe), (Rev 1)
  3 | Super Mario World (Europe).zip                           | (Europe)
  0 | Super Mario World (USA).zip                              | (USA)
 -4 | Super Mario World (Japan) (En) (Arcade) [b].zip          | (Japan), (En), (Arcade)
 
&lt;pcloneList> "Super Mario - Yossy Island"
 -2 | Super Mario - Yossy Island (Japan) (Rev 1).zip           | (Japan), (Rev 1)
 -3 | Super Mario - Yossy Island (Japan) (Rev 2).zip           | (Japan), (Rev 2)
 -3 | Super Mario - Yossy Island (Japan).zip                   | (Japan)
</programlisting>

<para>After scoring the ROMs, the first pass of the filtering takes the ROM 
with highest score on every set. If more than one ROM have the same highest 
score, then the first ROM in the list is selected. Following with the example, 
after the first filter the ROM collection will look like this.</para>

<programlisting>
&lt;pcloneList> "Super Mario All-Stars and Super Mario World"
  3 | Super Mario All-Stars and Super Mario World (Europe).zip | (Europe)

&lt;pcloneList> "Super Mario All-Stars and Super Mario World"
  0 | Super Mario All-Stars + Super Mario World (USA).zip      | (USA)

&lt;pcloneList> "Super Mario World"
  4 | Super Mario World (Europe) (Rev 1).zip                   | (Europe), (Rev 1)
 
&lt;pcloneList> "Super Mario - Yossy Island"
 -2 | Super Mario - Yossy Island (Japan) (Rev 1).zip           | (Japan), (Rev 1)
</programlisting>

<para>Out of a total of 9 ROMs, so far only 4 will be copied into the
destination directory.</para>

<para>The second part of the filtering process allows you to remove
unwanted ROMs with specific tags. Users in Europe or USA normally do not want 
Japanese ROMs at all. To remove ROMs belonging to the Japanese region 
configure.</para>

<programlisting>
&lt;includeTags>Europe, USA&lt;/includeTags>
&lt;excludeTags>Japan&lt;/excludeTags>
</programlisting>

<para>This filter will exclude all ROMs with the tag <emphasis>Japan</emphasis>, 
but only if the ROM has not the tags <emphasis>Europe</emphasis> or 
<emphasis>USA</emphasis>. This is to prevent filtering ROMs with
tags like <emphasis>(Japan, USA)</emphasis> or <emphasis>(Japan, 
Europe)</emphasis>. After the second pass of the filtering process, the 
filtering is over and the list of ROMs to be copied to the destination directory
will look like this.</para>

<programlisting>
&lt;pcloneList> "Super Mario All-Stars and Super Mario World"
  3 | Super Mario All-Stars and Super Mario World (Europe).zip | (Europe)

&lt;pcloneList> "Super Mario All-Stars and Super Mario World"
  0 | Super Mario All-Stars + Super Mario World (USA).zip      | (USA)

&lt;pcloneList> "Super Mario World"
  4 | Super Mario World (Europe) (Rev 1).zip                   | (Europe), (Rev 1)
</programlisting>

<para>The list of tags for every ROM collection can be displayed with the
<userinput>list-tags</userinput> command, which also prints how many ROMs
in the collection have that tag. This command is very handy to know which tags
to put in the configuration file for that ROM collection. Note that if a ROM 
has more than one tag it will be counted twice. For example:</para>

<screen>
$ ./xru-console.py list-tags snes
XBMC ROM utilities - Console ROMs version 0.1.0
[Parsing config file]
[Listing tags]
Filter name = snes
[Tag histogram]
...
   104  Fr
   120  En
   173  Rev 1
   191  BS
   220  Beta
   626  Europe
   968  USA
  1925  Japan
</screen>

<para>Before you copy/update your filtered ROM collection, you may
want to check what will happen and the <userinput>check-filter</userinput> 
command does precisely this. For example:
</para>

<screen>
$ ./xru-console.py check-filter snes
XBMC ROM utilities - Console ROMs version 0.1.0
[Parsing config file]
[Check-filter ROM]
Filter name = snes
Using No-Intro parent/clone DAT
Parsing No-Intro XML DAT
Parsing No-Intro XML file ./Nintendo - SNES Parent-Clone (20140608-202038).dat...  done
Total number of games = 3366
Number of parents = 1828
Number of clones = 1538
[Filtering ROMs]
...
&lt;ROM set> Super Mario All-Stars + Super Mario World
   0 [IH] Super Mario All-Stars + Super Mario World (USA).zip
&lt;ROM set> Super Mario All-Stars and Super Mario World
   7 [IH] Super Mario All-Stars and Super Mario World (Europe).zip
...
&lt;ROM set> Super Mario Kart
   7 [IH] Super Mario Kart (Europe).zip
   0 [IH] Super Mario Kart (USA).zip
  -3 [EH] Super Mario Kart (Japan).zip
&lt;ROM set> Super Mario RPG
  -3 [EH] Super Mario RPG (Japan).zip
&lt;ROM set> Super Mario RPG - Legend of the Seven Stars
   0 [IH] Super Mario RPG - Legend of the Seven Stars (USA).zip
...
</screen>

<para>Have a look at the end of next section for a quick explanation of
the flags and numbers in this listing.</para>

</sect2>

<sect2>
<title>No-Intro One ROM-One Game (1R1G) DATs</title>

<para>The first pass of the filtering process groups different versions of
the same game together. However, based only on the ROM names this process is 
far from perfect and will produce wrong results for some games. For example:</para>

<programlisting>
&lt;pcloneList> "Super Mario All-Stars and Super Mario World"
  Super Mario All-Stars and Super Mario World (Europe).zip | (Europe)

&lt;pcloneList> "Super Mario All-Stars + Super Mario World"
  Super Mario All-Stars + Super Mario World (USA).zip      | (USA)
</programlisting>

<para>Will be grouped into different parent/clone sets, however it is clear
that they are just the European and USA version of the same game. Actually,
this example (however real) is not very common. Most of the games belonging to 
the same set having different name are the Japanese versions of the game.</para>

<para>For many users, the basic filtering will be fine. However, for
picky users this problem may be solved using the No-Intro One ROM-One 
Game (1G1R) DATs. A typical No-Intro DAT looks like this.</para>

<programlisting>
game (
  name "Sonic The Hedgehog (Japan, Korea)"
  description "Sonic The Hedgehog (Japan, Korea)"
  rom ( name "Sonic The Hedgehog (Japan, Korea).md" size 524288 crc AFE05EEE )
)

game (
  name "Sonic The Hedgehog (USA, Europe)"
  description "Sonic The Hedgehog (USA, Europe)"
  rom ( name "Sonic The Hedgehog (USA, Europe).md" size 524288 crc F9394E97 flags verified )
)
</programlisting>

<para>However, from <ulink url="http://datomatic.no-intro.org/">DAT-o-MATIC</ulink> 
a No-Intro DAT in XML format having proper parent/clone lists are available. This is also
referred to as a 1G1R list. To download a 1G1R XML DAT for your favourite system,
go to <ulink url="http://datomatic.no-intro.org/">DAT-o-MATIC</ulink>, click
on the <userinput>P/Clone XML</userinput> link, select your console system
in the drop-box on the top, and finally click on the 
<userinput>Download</userinput> button. This is how a 1G1R XML DAT looks like.</para>

<programlisting>
&lt;game name="Sonic The Hedgehog (USA, Europe)">
  &lt;description>Sonic The Hedgehog (USA, Europe)&lt;/description>
  &lt;release name="Sonic The Hedgehog" region="EUR"/>
  &lt;release name="Sonic The Hedgehog" region="USA"/>
  &lt;rom name="Sonic The Hedgehog (USA, Europe).md" size="524288" crc="F9394E97" status="verified"/>
&lt;/game>
&lt;game name="Sonic The Hedgehog (Japan, Korea)" cloneof="Sonic The Hedgehog (USA, Europe)">
  &lt;description>Sonic The Hedgehog (Japan, Korea)&lt;/description>
  &lt;release name="Sonic The Hedgehog" region="JPN"/>
  &lt;release name="Sonic The Hedgehog" region="KOR"/>
  &lt;rom name="Sonic The Hedgehog (Japan, Korea).md" size="524288" crc="AFE05EEE"/>
&lt;/game>
</programlisting>

<para>If you pay attention, there is a <userinput>cloneof</userinput> attribute 
on every clone ROM in the collection. This allows 
<application>xru-console</application> to make a perfect parent/clone list 
before applying filters, and this will produce a better filtered list.</para>

<para>In order to use a No-Intro 1G1R XML DAT 
with <application>xru-console</application>, you need to configure the 
following option for every collection filter where you want to use it. Make
sure you use the correct XML DAT for the collection!</para>

<programlisting>
&lt;collection&gt;
...
  &lt;NoIntroDat&gt;./Sega - Genesis Parent-Clone (20140601).dat&lt;/NoIntroDat&gt;
...
&lt;/collection&gt;
</programlisting>

<para>In No-Intro 1G1R mode, <application>xru-console</application> makes the
main parent/clone list using the XML DAT instead of scanning you source 
directory. Then, the two pass filtering is applied. Finally, 
your source directory will be scanned and for every ROM set in the 
parent/clone list, the ROM with highest score will be copied into the
destination directory. If you do not have that ROM, then the second ROM
in the scored ROM set will be tried, and so on.</para>

<para>In No-Intro 1G1R mode, two additional commands are available. 
<userinput>list-nointro &lt;romSetName></userinput> lists all the games in the
No-Intro 1G1R XML DAT. For example:</para>

<screen>
$ ./xru-console.py list-nointro genesis
XBMC ROM utilities - Console ROMs version 0.1.0
[Parsing config file]
[Listing No-Intro XML DAT]
Filter name = genesis
Parsing No-Intro XML DAT
Parsing No-Intro merged XML file ./Sega - Genesis Parent-Clone (20140601).dat...  done
...
&lt;game> Sonic The Hedgehog (USA, Europe)
&lt;game> Sonic The Hedgehog (Japan, Korea)
&lt;game> Sonic The Hedgehog 2 (World) (Rev A)
&lt;game> Sonic The Hedgehog 2 (World)
&lt;game> Sonic The Hedgehog 2 (World) (Beta)
&lt;game> Sonic The Hedgehog 3 (Europe)
&lt;game> Sonic The Hedgehog 3 (Japan, Korea)
&lt;game> Sonic The Hedgehog 3 (USA)
...
&lt;game> Zoop (USA)
Number of games = 1681
</screen>

<para><userinput>check-nointro &lt;romSetName></userinput> will scan you source 
directory and will report how many ROMs you have, how many ROMs you don't 
have (missing ROMs), and how many ROMs you have not listed in the 
DAT (unknown ROMs).</para>

<screen>
$ ./xru-console.py check-nointro genesis-local-nointro
XBMC ROM utilities - Console ROMs version 0.1.0
[Parsing config file]
[Checking ROMs with No-Intro XML DAT]
Filter name = genesis-local-nointro
Parsing No-Intro XML DAT
Parsing ./DAT-No-Intro/Sega - Genesis Parent-Clone (20140601-111936).dat...  done
[Scanning ROMs in sourceDir]
[Report]
Games in DAT = 1681
Have ROMs    = 1681
Missing ROMs = 0
Unknown ROMs = 47
</screen>

<para>If you specify the option <userinput>-v</userinput>,  
<application>xru-console</application> will print the missing and unknown ROMs.
<userinput>-vv</userinput> will also print the ROMs you have.</para>

<para>Note that <application>xru-console</application> only looks at the 
file name of the ROM! It does not check the ROM checksum like more advanced 
ROM Managers, for example <application>CRLMamePro</application> or 
<application>ROM Vault</application>.</para>

<para>Before you copy/update your filtered ROM collection, you may
want to check what will happen and the <userinput>check-filter</userinput> 
command does precisely that. For example:
</para>

<screen>
$ ./xru-console.py check-filter snes
XBMC ROM utilities - Console ROMs version 0.1.0
[Parsing config file]
[Check-filter ROM]
Filter name = snes
Using No-Intro parent/clone DAT
Parsing No-Intro XML DAT
Parsing No-Intro XML file ./Nintendo - SNES Parent-Clone (20140608-202038).dat...  done
Total number of games = 3366
Number of parents = 1828
Number of clones = 1538
[Filtering ROMs]
...
&lt;ROM set> Super Mario All-Stars and Super Mario World
   7 [IH] Super Mario All-Stars and Super Mario World (Europe).zip
   0 [IH] Super Mario All-Stars + Super Mario World (USA).zip
...
&lt;ROM set> Super Mario RPG - Legend of the Seven Stars
   0 [IH] Super Mario RPG - Legend of the Seven Stars (USA).zip
  -3 [EH] Super Mario RPG (Japan).zip
&lt;ROM set> Super Mario World
  11 [IH] Super Mario World (Europe) (Rev 1).zip
   7 [IH] Super Mario World (Europe).zip
   0 [IH] Super Mario World (USA).zip
  -3 [EH] Super Mario World (Japan) (En) (Arcade) [b].zip
  -3 [EH] Super Mario World - Super Mario Bros. 4 (Japan).zip
...|  ||
   |  |+-- Have flag
   |  +--- Included flag
   +------ Score
</screen>

<para>In this ROM listing, you can see the parent/clone sets, the score of each
ROM, if the ROM is included or excluded, and if the ROM exists in the source
directory or not. Note that if you use a No-Intro XML DAT you may have missing
ROMs. However, if you do not use the DAT then <emphasis>you will always have
all the ROMs</emphasis> in this list.</para>
</sect2>

<sect2>
<title>Updating/Copying filtered ROMs</title>

<para>Once you have setup your configuration file and checked the filter
output (note that you can configure several filters for the
same ROM source directory, for example, to place Europe/USA games and
Japanese game into different destination directories) then it is time to
copy your filtered ROMs from the source directory into the destination
directory.</para>

<para>The <userinput>copy &lt;romSetName></userinput> command will filter
your ROMs and then copy, one by one, every filtered ROM into the
destination directory.</para>

<screen>
$ ./xru-console.py copy genesis
XBMC ROM utilities - Console ROMs version 0.1.0
[Parsing config file]
[Copy/Update ROMs]
Filter name = genesis-local
Using directory listing
[Reading ROMs in source dir]
Found 1728 ROMs
[Filtering ROMs]
[Scanning sourceDir for ROMs to be copied]
[Creating list of ROMs to be copied/updated]
[Copying ROMs into destDir]
  0% &lt;Copied> 10 Super Jogos (Brazil).zip
  0% &lt;Copied> 16 Zhang Ma Jiang (China) (Unl).zip
  0% &lt;Copied> 3 Ninjas Kick Back (USA).zip
...
 99% &lt;Copied> [BIOS] Sega CD 2 (USA) (v2.00W).zip
 99% &lt;Copied> [BIOS] Sega TMSS (World).zip
 99% &lt;Copied> [BIOS] X'Eye (USA) (v2.00).zip
[Report]
Copied 962 ROMs
</screen>

<para>The <userinput>update &lt;romSetName></userinput> command operates
in a similar way to <userinput>copy</userinput>. However, rather than
copying all the ROMs, each ROMs in sourceDir is compared with the same
named ROM in destDir, and the file will be copied only if the destination
ROM does not exist or the file sizes are different. This is very
useful when you destination directory is network-mounted.</para>

<screen>
$ ./xru-console.py update genesis --cleanROMs
XBMC ROM utilities - Console ROMs version 0.1.0
[Parsing config file]
[Copy/Update ROMs]
Filter name = genesis
Using No-Intro parent/clone DAT
Parsing No-Intro XML DAT
Parsing No-Intro XML file ./Sega - Genesis Parent-Clone (20140601-111936).dat...  done
Total number of games = 1681
Number of parents = 1010
Number of clones = 671
[Filtering ROMs]
[Scanning sourceDir for ROMs to be copied]
[Creating list of ROMs to be copied/updated]
[Updating ROMs into destDir]
  0% &lt;Copied > Action 52 (USA) (Alt 1) (Unl).zip
 31% &lt;Copied > Gain Ground (World) (Alt 1).zip
 32% &lt;Copied > Ghostbusters (World).zip
 35% &lt;Copied > HardBall III (USA) (Unl).zip
...
 98% &lt;Copied > Zany Golf (USA, Europe).zip
 99% &lt;Copied > [BIOS] LaserActive (USA) (v1.02).zip
[Report]
Copied ROMs     47
Updated ROMs   821
[Cleaning ROMs in ROMsDest]
&lt;Deleted> ATP Tour Championship Tennis (USA).zip
&lt;Deleted> Action 52 (USA) (Unl).zip
...
&lt;Deleted> [BIOS] Sega CD 2 (USA) (v2.00W).zip
Deleted 122 redundant ROMs
</screen>

<para>By default, only the newly copied files are displayed during the update
process. If you want to check also the updated files, then use the
option <userinput>-v</userinput> in the command line.</para>

<para>With both <userinput>copy</userinput> and <userinput>update</userinput> 
commands, you can use the flags <userinput>--dryRun</userinput>,
<userinput>--cleanROMs</userinput> and <userinput>--cleanNFO</userinput>.</para>

<para><userinput>--dryRun</userinput> will not perform any operation in your
files. Use this flag if you want to test what would happened with your ROMs,
and if you are happy with the results execute 
<application>xru-console</application> without <userinput>--dryRun</userinput>
option. Note that if you use <userinput>--dryRun</userinput>, 
<userinput>--cleanROMs</userinput> and <userinput>--cleanNFO</userinput> will
show you inaccurate outcomes, since the destination directory is not modified.</para>

<para><userinput>--cleanROMs</userinput> will delete any unknown ROMs in the
destination directory. After copying/update the filtered ROMs, the
destination directory will be scanned and any ROM found not in the list of
filtered ROMs will be deleted. Use this with caution! The list of deleted ROMs 
in destDir is always printed.</para>

<para>Both <ulink url="http://forum.xbmc.org/showthread.php?tid=85724">Advanced Launcher</ulink> 
and <ulink url="http://forum.xbmc.org/showthread.php?tid=70115">ROM Collection Browser</ulink> 
create NFO files having the scrapped ROM information, like year of the release,
genre, etc. Use the <userinput>--cleanNFO</userinput> to remove any unknown
NFO files, in a similar way to the <userinput>--cleanROMs</userinput> flag. The
list of deleted NFO files in destDir is always printed.</para>
</sect2>

<sect2>
<title>Art Work</title>

<para>Both <ulink url="http://forum.xbmc.org/showthread.php?tid=85724">Advanced Launcher</ulink> 
and <ulink url="http://forum.xbmc.org/showthread.php?tid=70115">ROM Collection Browser</ulink> 
have good scrapers that will download most of the artwork for your ROMs. However, 
the scraping process may be very slow for huge ROM collections (for example, a 
collection having 2,000 ROMs may take up to 10 hours to scrap). This problem may be 
solved if you have locally available collections of artwork. 
<application>xru-console</application> can copy the matching artwork for your 
filtered collection in the directories you specify, and then you can choose 
the offline scraper that simply reads those files from the disk instead of 
downloading them from the Internet.</para>

<para><application>xru-console</application> currently uses two types of 
artwork files, named <userinput>thumbs</userinput> and 
<userinput>fanart</userinput>, which correspond with the two artwork categories 
used by <ulink url="http://forum.xbmc.org/showthread.php?tid=85724">Advanced Launcher</ulink>. 
Roughly speaking, thumbs are images that will be displayed for every game in
a prominent position (this is XBMC skin and listing-mode dependant) and
fanart will appear as a background. You can think of the thumbs as the game box
and the fanart as the in-game screenshot.</para>

<important>Artwork must have .png extension (lowercase).</important>

<para>Full collections of No-Intro ROMs exist out there. However, it is very
difficult to find a <emphasis>complete</emphasis> artwork collection that
have boxes/screenshots/titles. Partial artwork collections are available, although.
To overcome this problem, <application>xru-console</application> will
try to replace any missing piece of artwork with another one belonging to
the same parent/clone set of the filtered ROM, in the case you have a partial
artwork set which does not belong to the region of the ROMs you are filtering. 
We will see how this works later with an example.</para>

<para>If you have local Artwork available and want to copy it into destination
folders (synchronised with your filtered ROM list), then configure the following
into your ROM collection</para>

<programlisting>
&lt;collection>
...
  &lt;ThumbsSource>/home/xbmc/roms/ArtWork/nintendo-snes-boxes/&lt;/ThumbsSource>
  &lt;FanartSource>/home/xbmc/roms/ArtWork/nintendo-snes-snaps/&lt;/FanartSource>
  &lt;ThumbsDest  >/home/xbmc/NUC/ROMs/ArtWork/nintendo-snes-thumbs/&lt;/ThumbsDest>
  &lt;FanartDest  >/home/xbmc/NUC/ROMs/ArtWork/nintendo-snes-fanart/&lt;/FanartDest>
...
&lt;/collection>
</programlisting>

<para>You may check you configuration with the
<userinput>check-artwork &lt;romSetName></userinput> command. For example:</para>

<screen>
$ ./xru-console.py check-artwork genesis
XBMC ROM utilities - Console ROMs version 0.1.0
[Parsing config file]
[Check-ArtWork]
Filter name = genesis
Using No-Intro parent/clone DAT
Parsing No-Intro XML DAT
Parsing No-Intro XML file ./Sega - Genesis Parent-Clone (20140601-111936).dat...  done
Total number of games = 1681
Number of parents = 1010
Number of clones = 671
[Optimising ArtWork file list]
[Updating ArtWork]
...
&lt;&lt;  ROM  >> Sonic The Hedgehog (USA, Europe).zip
 Original   Sonic The Hedgehog (USA, Europe)
 Have T     Sonic The Hedgehog (USA, Europe).png
 Have F     Sonic The Hedgehog (USA, Europe).png
...
&lt;&lt;  ROM  >> Speedball 2 (Europe).zip
 Replaced   Speedball 2 - Brutal Deluxe (USA)
 Have T     Speedball 2 - Brutal Deluxe (USA).png
 Have F     Speedball 2 - Brutal Deluxe (USA).png
...
&lt;&lt;  ROM  >> [BIOS] X'Eye (USA) (v2.00).zip
 Not found
[Report]
Number of ROMs in destDir  = 868
Number of ArtWork found    = 722
Number of original ArtWork = 179
Number of replaced ArtWork = 543
Number of have Thumbs    = 722
Number of missing Thumbs = 0
Number of have Fanart    = 707
Number of missing Fanart = 15
</screen>

<para>Note that for the game <emphasis>Speedball 2</emphasis> no artwork was
found for the filtered game in destDir. However, a replacement belonging to
another ROM in the parent/clone set was found. Some other ROMs, particularly BIOSes,
won't have any artwork and will produce a miss.</para>

<para>When you are happy with the results, you can copy/update your
Artwork with the commands <userinput>copy-artwork &lt;romSetName></userinput>
and <userinput>update-artwork &lt;romSetName></userinput>. You can use the
<userinput>--cleanArtWork</userinput> flag if you want to delete
unknown Artwork into the thumbs and fanart destination directories. For example:</para>

<screen>
$ ./xru-console.py update-artwork genesis --cleanArtWork
XBMC ROM utilities - Console ROMs version 0.1.0
[Parsing config file]
[Updating/copying ArtWork]
Filter name = genesis
Using No-Intro parent/clone DAT
Parsing No-Intro XML DAT
Parsing No-Intro XML file ./Sega - Genesis Parent-Clone (20140601-111936).dat...  done
Total number of games = 1681
Number of parents = 1010
Number of clones = 671
[Optimising ArtWork file list]
[Updating ArtWork]
  1% &lt;Missing Fanart> Adventurous Boy - Mao Xian Xiao Zi (China) (Unl)
  5% &lt;Missing Fanart> Awesome Possum Kicks Dr Machino's Butt! (USA) (Beta)
...
 96% &lt;Missing Fanart> World Series Baseball 98 (USA)
[Report]
Copied thumbs      0
Updated thumbs   722
Missing thumbs     0
Copied fanart      0
Updated fanart   707
Missing fanart    15
[Cleaning ArtWork]
Deleted 0 redundant thumbs
Deleted 0 redundant fanart
</screen>
</sect2>
</sect1>

<!-- ======================================================================= -->
<sect1>
<title><application>xru-mame</application></title>

<para><application>xru-mame</application> is able to filter a 
<application>MAME</application> ROM collection. This tool is somewhat more
sophisticated than <application>xru-console</application> because 
<application>MAME</application> keeps a full database with a lot of 
information about the arcade game it runs. This database can be used with a 
lot of filtering options to fully customize the list of games in your 
front-end.</para>

<para><application>xru-mame</application> requires a command that defines the
main action to do. Also, many commands require the name of the filter
to use.</para>

<screen>
$ xru-mame.py [options] &lt;command&gt; [filterName]
</screen>

<para>The following commands are supported.</para>

<itemizedlist mark='bullet'>
<listitem>
<para><userinput>usage</userinput></para>
<para>prints a summary of the commands and options.</para>
</listitem>

<listitem>
<para><userinput>reduce-XML</userinput></para>
<para>Takes <application>MAME</application> XML as input, picks the useful 
information, and writes an stripped XML with only meaningful information. The 
reason for doing this is because <application>MAME</application> XML file 
is huge and takes a long time to process it. After reducing it, all subsequent 
processing should be much quicker.</para>
</listitem>

<listitem>
<para><userinput>merge</userinput></para>
<para>Takes MAME XML (reduced) info file and <filename>Catver.ini</filename> 
and makes an output XML file with all the necessary information for proper 
game filtering.</para>
</listitem>

<listitem>
<para><userinput>list-merged</userinput></para>
<para>List every ROM set system defined in the merged MAME XML information file.
Use <userinput>--verbose</userinput> to get more information.</para>
</listitem>

<listitem>
<para><userinput>list-categories</userinput></para>
<para>Reads <filename>Catver.ini</filename> and makes a histogram of the categories 
(prints all available categories and tells how many ROMs every category has).</para>
</listitem>

<listitem>
<para><userinput>list-drivers</userinput></para>
<para>Reads merged XML database and prints a histogram of the drivers (how many
games use each driver).</para>
</listitem>


<listitem>
<para><userinput>list-controls</userinput></para>
<para>Reads merged XML database and prints a histogram of the game controls:
buttons, players and input devices.</para>
</listitem>
<listitem>
<para><userinput>list-years</userinput></para>
<para>Reads merged XML database and prints a histogram of the game release year
(how many games were released on each year).</para>
</listitem>

<listitem>
<para><userinput>check-filter &lt;filterName&gt;</userinput></para>
<para>Applies filters and checks you source directory for have and missing 
ROMs.</para>
</listitem>

<listitem>
<para><userinput>copy &lt;filterName&gt;</userinput></para>
<para>Applies ROM filters defined in the configuration file and copies the
contents of sourceDir into destDir. This overwrites ROMs in destDir.</para>
</listitem>

<listitem>
<para><userinput>update &lt;filterName&gt;</userinput></para>
<para>Like copy, but only copies files if file size is different (this saves
a lot of time, particularly if sourceDir and/or destDir are on a
network-mounted filesystem).</para>
</listitem>

<listitem>
<para><userinput>check-artwork &lt;filterName&gt;</userinput></para>
<para>Reads the ROMs in destDir, checks if you have the corresponding artwork
files, and prints a report.</para>
</listitem>

<listitem>
<para><userinput>copy-artwork &lt;filterName&gt;</userinput></para>
<para>Reads the ROMs in destDir and tries to copy the matching artwork to 
the destination directory.</para>
</listitem>

<listitem>
<para><userinput>update-artwork &lt;filterName&gt;</userinput></para>
<para>Like copy-artwork, but only copies images if file sizes are different. 
This may save a lot of time.</para>
</listitem>
</itemizedlist>

<para>The following options are supported.</para>

<itemizedlist mark='bullet'>
<listitem>
<para><userinput>-h, --help</userinput></para>
<para>Print short command reference</para>
</listitem>

<listitem>
<para><userinput>-v, --verbose</userinput></para>
<para>Print more information about what's going on</para>
</listitem>

<listitem>
<para><userinput>-l, --log</userinput></para>
<para>Save program output in <filename>xru-mame-log.txt</filename>.</para>
</listitem>

<listitem>
<para><userinput>--logto [logName]</userinput></para>
<para>Save program output in the file you specify.</para>
</listitem>

<listitem>
<para><userinput>--dryRun</userinput></para>
<para>Don't modify destDir at all, just print the operations to be done.</para>
</listitem>

<listitem>
<para><userinput>--cleanROMs</userinput></para>
<para>Deletes ROMs in destDir not present in the filtered ROM list.</para>
</listitem>

<listitem>
<para><userinput>--generateNFO</userinput></para>
<para>Generates NFO files with game information for the launchers.</para>
</listitem>

<listitem>
<para><userinput>--cleanNFO</userinput></para>
<para>Deletes unknown NFO files in the destination directory.</para>
</listitem>

<listitem>
<para><userinput>--cleanArtWork</userinput></para>
<para>Deletes unknown ArtWork in destination directories.</para>
</listitem>
</itemizedlist>

<sect2>
<title>Configuration file</title>

<para><application>xru-mame</application> requires a configuration file,
named <filename>xru-mame-config.xml</filename>, 
where you setup the ROM directories and filters. A typical 
configuration filter looks like this.</para>

<programlisting>
&lt;!-- Example configuration file for XBMC ROM utilities -->
&lt;MAMEConfig>
&lt;General>
  &lt;MAME_XML      >./DAT-mame/mame-0154.xml&lt;/MAME_XML>
  &lt;MAME_XML_redux>./DAT-mame/mame-0154-reduced.xml&lt;/MAME_XML_redux>
  &lt;Catver        >./DAT-mame/Catver.ini&lt;/Catver>
  &lt;MergedInfo    >./DAT-mame/mame-0154-merged.xml&lt;/MergedInfo>
&lt;/General>

&lt;MAMEFilter name="main">
  &lt;ROMsSource>/home/xbmc/roms/roms-mame/&lt;/ROMsSource>
  &lt;ROMsDest  >/home/xbmc/NUC-remote/ROMs/roms-mame-main/&lt;/ROMsDest>

  &lt;ThumbsSource>/home/xbmc/roms/ArtWork/nintendo-snes-boxes/&lt;/ThumbsSource>
  &lt;FanartSource>/home/xbmc/roms/ArtWork/nintendo-snes-snaps/&lt;/FanartSource>
  &lt;ThumbsDest  >/home/xbmc/NUC-remote/ROMs/ArtWork/nintendo-snes-thumbs/&lt;/ThumbsDest>
  &lt;FanartDest  >/home/xbmc/NUC-remote/ROMs/ArtWork/nintendo-snes-fanart/&lt;/FanartDest>

  &lt;MainFilter>NoClones, NoSamples, NoMechanical, NoBIOS, NoNonworking&lt;/MainFilter>
  &lt;Driver>not cps1&lt;/Driver>
  &lt;Categories>not Mature and not Casino and not PinMAME and not Fruit_Machines&lt;/Categories>
  &lt;Controls>not Mahjong and not Gambling and not Hanafuda&lt;/Controls>
  &lt;Buttons>buttons == 1 or buttons == 2&lt;/Buttons>
  &lt;Players>players == 1 or players == 2&lt;/Players>
  &lt;Years>year >= 1990 and year &amp;lt; 2000&lt;/Years>
  &lt;!-- &lt;YearsOpts>YearExpansion&lt;/YearsOpts> -->
&lt;/MAMEFilter>

&lt;MAMEFilter name="cps1">
  &lt;ROMsSource>/home/xbmc/roms/roms-mame/&lt;/ROMsSource>
  &lt;ROMsDest  >/home/xbmc/NUC-remote/ROMs/roms-mame-cps1/&lt;/ROMsDest>

  &lt;MainFilter>NoClones, NoSamples, NoMechanical&lt;/MainFilter>
  &lt;Driver>cps1&lt;/Driver>
&lt;/MAMEFilter>
&lt;/MAMEConfig>
</programlisting>
</sect2>

<sect2 id="create_mame_database">
<title>Creating the <application>MAME</application> ROM database</title>

<para>The first step before games can be filtered is to create a 
<application>MAME</application> game database that 
<application>xru-mame</application> can use. First, check what is your 
<application>MAME</application> version with the following command.</para>

<screen>
$ mame -?
M.A.M.E. v0.154 (Jul 23 2014) - Multiple Arcade Machine Emulator
Copyright Nicola Salmoria and the MAME team

MAME is an emulator: it reproduces, more or less faithfully, the behaviour of
...
</screen>

<para>In this example <application>MAME</application> has the version number
0.154. This number will be used in the configuration files so when you get
a new version of <application>MAME</application> you won't mess up game
databases.</para>

<para>Next, create the <application>MAME</application> XML game database. Execute
the following command to place the XML database into <filename>mame-0154.xml</filename>:</para>

<screen>
$ mame -listxml > mame-0154.xml
</screen>

<para>Now, create a basic <filename>xru-mame-config.xml</filename> configuration 
file. Note that in this example all the <application>MAME</application> related 
game databases will be stored in the directory <filename>DAT-mame</filename> 
placed where you have the <filename>xru-mame.py</filename> script for
convenience.</para>

<programlisting>
&lt;MAMEConfig>
&lt;General>
  &lt;MAME_XML      >./DAT-mame/mame-0154.xml&lt;/MAME_XML>
  &lt;MAME_XML_redux>./DAT-mame/mame-0154-reduced.xml&lt;/MAME_XML_redux>
  &lt;Catver        >./DAT-mame/Catver.ini&lt;/Catver>
  &lt;MergedInfo    >./DAT-mame/mame-0154-merged.xml&lt;/MergedInfo>
&lt;/General>
&lt;/MAMEConfig>
</programlisting>

<para><application>MAME</application> XML game database is huge and has much more
information than needed for game filtering. Next, the game database will be "reduced",
that is, non-relevant information will be stripped off and a shorted game database
will be created (named <filename>mame-0154-reduced.xml</filename> in the above 
configuration file example). Execute:</para>

<screen>
$ ./xru-mame.py reduce-XML
XBMC ROM utilities - MAME edition version 0.1.0
[Parsing config file]
[Reducing MAME XML game database]
Reading MAME XML game database...
NOTE: this will take a looong time...
Parsing MAME XML file ./DAT-mame/mame-0154.xml...   done
Reducing MAME XML database...
Building reduced output XML file...
Writing reduced XML file ./DAT-mame/mame-0154-reduced.xml
</screen>

<para>Please be patient! This reduction process will take several minutes and
about 2 GB of RAM will be used. However, all subsequent commands will be much
faster. The reduction will shrink <filename>mame-0154.xml</filename> to 
<filename>mame-0154-reduced.xml</filename> from about 150 MB to about 15 MB.</para>

<para>Next, download the file <filename>Catver.ini</filename> from 
<ulink url="http://www.progettoemma.net/?catlist">Progetto EMMA</ulink>
(make sure you get the English version) and place it in the 
<filename>DAT-mame</filename> directory. The following command 
will merge <filename>mame-0154-reduced.xml</filename> with 
<filename>Catver.ini</filename> to create 
<filename>mame-0154-merged.xml</filename> and then your are done.
Execute:</para>

<screen>
XBMC ROM utilities - MAME edition version 0.1.0
[Parsing config file]
[Building merged MAME filter database]
[Parsing Catver.ini]
[Parsing (reduced) MAME XML file]
Parsing MAME XML file ./DAT-mame/mame-0154-reduced.xml...   done
[Merging MAME XML and categories]
[WARNING] Category not found for game 18wheelu
...
[WARNING] Category not found for game r4700le
[Writing output file]
Output file ./DAT-mame/mame-0154-merged.xml
</screen>

<para>If you get some some warnings about non-found categories for some games
just ignore them. You can now list the games in your merged XML database.</para>

<screen>
$ ./xru-mame.py list-merged
XBMC ROM utilities - MAME edition version 0.1.0
[Parsing config file]
[Short listing of reduced MAME XML]
Parsing merged MAME XML file './DAT-mame/mame-0154-reduced-merged.xml'...  done
005
|-- driver = segag80r.c
|-- sampleof = 005
|-- description = 005
|-- year = 1981
|-- manufacturer = Sega
|-- driver status = imperfect
+-- category = Maze
...
keycus_c430
|-- driver = src/mame/machine/ns11prot.c
|-- isdevice = yes
|-- description = KEYCUS C430
+-- category = System
[Report]
Number of games = 30551
Number of clones = 20513
Number of games with samples = 573
Number of devices = 907
</screen>

<para>You are now ready to start filtering your <application>MAME</application> ROMs.</para>
</sect2>

<sect2>
<title>Understanding <application>MAME</application> filters</title>

<para>In order to understand how the <application>MAME</application> filters
work, let's try a basic filter named <emphasis>main</emphasis>. Edit
your <filename>xru-mame-config.xml</filename> and add the following.</para>

<programlisting>
&lt;MAMEConfig>
&lt;General>
  &lt;MAME_XML      >./DAT-mame/mame-0154.xml&lt;/MAME_XML>
  &lt;MAME_XML_redux>./DAT-mame/mame-0154-reduced.xml&lt;/MAME_XML_redux>
  &lt;Catver        >./DAT-mame/Catver.ini&lt;/Catver>
  &lt;MergedInfo    >./DAT-mame/mame-0154-merged.xml&lt;/MergedInfo>
&lt;/General>

&lt;MAMEFilter name="main">
  &lt;ROMsSource>/home/wintermute/mame-roms/&lt;/ROMsSource>
  &lt;ROMsDest  >/home/NUC-remote/ROMs/roms-mame-main/&lt;/ROMsDest>

  &lt;MainFilter>NoClones, NoSamples, NoMechanical, NoBIOS, NoNonworking&lt;/MainFilter>
  &lt;Driver>not cps1 and not cps2 and not cps3 and not neogeo_noslot&lt;/Driver>
  &lt;Categories>not Casino and not PinMAME and not Fruit Machines&lt;/Categories>
  &lt;Controls>Joy or Lightgun and not(Mahjong or Hanafuda)&lt;/Controls>
  &lt;Buttons>buttons == 1&lt;/Buttons>
  &lt;Players>players == 1&lt;/Players>
  &lt;Years>year == 1990 or year == 1991&lt;/Years>
&lt;/MAMEFilter>
&lt;/MAMEConfig>
</programlisting>

<para>Every <application>MAME</application> filter requires a 
<userinput>&lt;MAMEFilter></userinput> tag and there the <userinput>name</userinput> attribute
defines the name you will used to invoke other command for this filter. Every 
filter require the <userinput>&lt;ROMsSource></userinput> and 
<userinput>&lt;ROMsDest></userinput> tags, which define the source
directory when you have all your ROMs and the destination directory where
filtered ROMs will be copied.</para>

<para>The rest of the tags inside <userinput>MAMEFilter</userinput> allows to
define filters to discard the games you don not want and keeps the ones you 
want.</para>

<sect3>
<title>Main filter</title>

<para>The first filter is configured with the tag 
<userinput>&lt;MainFilter></userinput>. Here you can write the following
filtering options (separated by commas if more than one).</para> 

<itemizedlist mark='bullet'>
<listitem>
<para><userinput>NoClones</userinput> will filter all the cloned games.
Clones are derived games, maybe in a different language other than
English or bootleg games. Most users will choose this option.</para>
</listitem>

<listitem>
<para><userinput>NoSamples</userinput> will filter all the games that use samples.</para>
</listitem>

<listitem>
<para><userinput>NoMechanical</userinput> will remove all the mechanical games. Most
of them are slot or pinball machines and do not work anyway.</para>
</listitem>

<listitem>
<para><userinput>NoBIOS</userinput> will remove all BIOS ROMs. BIOS are non-playable
ROMs necessary for other ROMs to work. Required BIOS are automatically added
as dependencies (that is, if a game you want needs a specific BIOS or device
they will be automatically included regardless of your filters), so using 
this option is always safe and recommended.</para>
</listitem>

<listitem>
<para><userinput>NoNonworking</userinput> will remove all games that do not work
or have serious emulation problems or emulation is preliminary.</para>
</listitem>
</itemizedlist>

<para>Note that games belonging to the <userinput>devices</userinput> 
type are removed automatically. Those are not really games but 
emulated devices and are non-playable. If a ROM you want requires some
device or BIOS these will be automatically added as dependencies so
removing devices (and BIOS) is a safe operation.</para>

<tip>If a ROM you want requires a device or BIOS in order to work they
will be added automatically to the filtered list as dependencies
regardless of your filter configuration. This guarantees that you
will be able to run all your ROMs. CHDs are not supported yet
as dependencies (you will need to copy CHDs manually to your
destination directory).</tip>
</sect3>

<sect3>
<title>Driver filter</title>

<para>After the main filter comes the driver filter, which is defined
inside the tag <userinput>&lt;Driver></userinput>. By default all drivers
will be included. If you specify a driver, then only games belonging
to that driver will be included. The <userinput>not</userinput> operator 
in front of a driver name excludes games belonging to that driver.
You can also specify multiple drivers separated by <userinput>and</userinput>
and <userinput>or</userinput> operators and use parenthesis to change the
operator precedence. For example:</para>

<programlisting>
(a) &lt;Driver>cps1&lt;/Driver>
(b) &lt;Driver>not cps1&lt;/Driver>
(c) &lt;Driver>not cps1 and not cps2&lt;/Driver>
(d) &lt;Driver>not (cps1 or cps2)&lt;/Driver>
(e) &lt;Driver>cps1 or cps2&lt;/Driver>

(a) Include CPS1 games.
(b) Exclude CPS1 games.
(c) Exclude both CPS1 and CPS2 games.
(d) Same as (c). Just another way of writing this filter.
(e) Include CPS1 or CPS2 games.
</programlisting>

<para>You can list the <application>MAME</application> drivers with 
the command <userinput>list-drivers</userinput>.</para>

<screen>
$ ./xru-mame.py list-drivers
XBMC ROM utilities - MAME edition version 0.1.0
[Parsing config file]
[Listing MAME drivers]
NOTE: clones are not included
NOTE: mechanical are not included
NOTE: devices are not included
Parsing merged MAME XML file './DAT-mame/mame-0154-merged.xml'...   done
[Final (used) drivers]
   1  calorie.c
   1  subs.c
...
 157  neogeo_noslot.c
 160  peplus.c
 199  naomi.c
 471  bfm_sc4.c
</screen>

<para>Note that you do not need to write the trailing .c when configuring
driver filters.</para>

</sect3>

<sect3>
<title>Categories filter</title>

<para>Categories are controlled with the tag
<userinput>&lt;Categories></userinput>. This filter and the filter
language (<userinput>and</userinput>, <userinput>or</userinput>, 
<userinput>not</userinput>, <userinput>(</userinput>, <userinput>)</userinput>)
works in a similar way to the <userinput>&lt;Driver></userinput> filter, 
but instead of drivers you specify game categories. For example:</para>

<programlisting>
(a) &lt;Categories>not Casino and not PinMAME and not Fruit_Machines&lt;/Categories>
(b) &lt;Categories>Fighter or Shooter&lt;/Categories>
(c) &lt;Categories>Fighter and Shooter&lt;/Categories>

(a) Exclude games belonging to Casino, PinMAME or Fruit_Machines.
(b) Include only Fighter or Shooter games.
(c) Will exclude all games. Note that every game has a unique category, so
    no game can be a Fighter AND a Shooter at the same time. Be careful when 
    configuring your filters.
</programlisting>

<para>You can have a look at the available categories with 
the <userinput>list-categories</userinput> command.</para>

<screen>
$ ./xru-mame.py list-categories
XBMC ROM utilities - MAME edition version 0.1.0
[Parsing config file]
[Listing categories from Catver.ini]
Opening ./DAT-mame/Catver.ini
[Making categories histogram]

[Final (used) categories]
    20  Climbing
...
  1342  PinMAME
  1343  Fighter
  1761  Casino
  2496  Shooter
 16779  Fruit Machines
</screen>

<para>Note that <filename>Catver.ini</filename> defines a main category and 
a sub-category for each game. For example:</para>

<programlisting>
[Category]
005=Maze / Shooter Small
10yard=Sports / Football Amer.
10yard85=Sports / Football Amer.
10yardj=Sports / Football Amer.
...     |        |
        |        +- Sub-category
        +---------- Main category
</programlisting>

<para><application>xru-mame</application> only takes into account the main
category and ignores any sub-categories. For example, the game 005 will
have category Maze, 10yard Sports, etc. Also, when merging the categories
into the merged XML database some categories are renamed for convenience, spaces
are changed with _, and dots are removed. For example:</para>

<programlisting>
System / BIOS               --> BIOS
Electromechanical - PinMAME --> PinMAME
Ball &amp; Paddle               --> Ball_and_Paddle
</programlisting>

<para>Any game that contains the category *Mature* either in the main
category or in the sub-category will be assigned to the category Mature
(no * in the final category name). In addition to the renamed, final categories
you can see the original <filename>Catver.ini</filename> categories with the 
<userinput>-v</userinput> switch and even more
information with <userinput>-vv</userinput>.</para>

</sect3>

<sect3>
<title>Controls filter</title>

<para>With the controls filter you can choose games based on the input
peripherals they require. This is useful if you only have a digital
joystick and will no be able to play games that require a Lightgun.
Also, it allows you to remove Mahjong games and fruit machines (fruit
machines typically have the controls ButtonsOnly).</para>

<para>The controls filter is configured with the tag
<userinput>&lt;Controls></userinput>. This filter and the filter
language (<userinput>and</userinput>, <userinput>or</userinput>, 
<userinput>not</userinput>, <userinput>(</userinput>, <userinput>)</userinput>)
works in a similar way to the <userinput>&lt;Driver></userinput> and
<userinput>&lt;Categories></userinput> filters. For example:</para>

<programlisting>
(a) &lt;Controls>Joy&lt;/Controls>
(b) &lt;Controls>Joy and not Mahjong&lt;/Controls>
(c) &lt;Controls>not Mahjong and not Hanafuda&lt;/Controls>
(d) &lt;Controls>not (Mahjong or Hanafuda)&lt;/Controls>
(e) &lt;Controls>Joy and not(Mahjong or Hanafuda)&lt;/Controls>

(a) Include if Joy and maybe other controls.
(b) Include if Joy and maybe other controls, but not Mahjong.
(c) Exclude game if Mahjong or Hanafuda.
(d) Same as above
(e) Include games that use digital Joystick and exclude games which
    use Mahjong or Hanafuda controls.
</programlisting>

<para>You can have a look at the available controls with 
the <userinput>list-controls</userinput> command.</para>

<screen>
$ ./xru-mame.py list-controls
XBMC ROM utilities - MAME edition version 0.1.0
[Parsing config file]
[Listing MAME controls]
NOTE: clones are not included
NOTE: mechanical are not included
NOTE: devices are not included
Parsing merged MAME XML file './DAT-mame/mame-0154-reduced.xml'...   done
[Input - control - type histogram (per game)]
    1  joy, mahjong, stick
    1  keypad, stick
...
  487  hanafuda, mahjong
  519  gambling
 1434  ButtonsOnly
 2874  joy
 
[Input - buttons histogram]
    9  14
   13  13
...
 1178  0
 1328  2
 
[Input - players histogram]
    1  6
    2  8
...
 2704  1
 2990  2
 
[Input - control - type histogram]
    9  Keyboard
   14  Keypad
...
  776  Mahjong
 1434  ButtonsOnly
 3134  Joy
</screen>

<para>This command additionally tells you the buttons and player
statistics. Note that some games require more than one control, and this is
indicated in the 
<userinput>[Input - control - type histogram (per game)]</userinput>. 
However, in the <userinput>[Input - control - type histogram]</userinput>
games that use two controls are counted twice, three controls are counted
three times, and so on.</para>
</sect3>

<sect3>
<title>Buttons filter</title>

<para>This filter allows you to filter games based on the number of buttons
that they require. This filter works as a Python expression and all
Python operators can be used with the variable <userinput>buttons</userinput>. 
Let's see this with an example. For example:</para>

<screen>
(a) &lt;Buttons>buttons == 1 or buttons == 2&lt;/Buttons>
(b) &lt;Buttons>buttons &amp;lt;= 8&lt;/Buttons>

(a) Include games with 1 or 2 buttons.
(b) Include games that require 8 buttons or less. The operator &lt;=  must be 
    written &amp;lt;= in the configuration file because of the XML rules.
</screen>

<para>You can see the button statistics with the <userinput>list-controls</userinput>
command. Have a look at the previous section for an example.</para>
</sect3>

<sect3>
<title>Players filter</title>

<para>This filter allows you to select games based on the number of players. Note
that a game for 2 players means a game in which the two players may play simultaneously
or alternated. The players filter is a Python expression over the variable 
<userinput>players</userinput>, for example:</para>

<screen>
(a) &lt;Players>players == 1 or players == 2&lt;/Players>

(a) Include games with 1 or 2 players.
</screen>

<para>You can see the player statistics with the <userinput>list-controls</userinput>
command. Have a look at the controls filter section for an example.</para>
</sect3>

<sect3>
<title>Years filter</title>

<para>With this filter you can choose games based on the year they were
released. This is very useful to get rid of the oldies or to configure
the 1980s launcher, the 1990s launcher, etc.</para>

<para>This filter works in a similar way to the <userinput>Buttons</userinput> 
and <userinput>Players</userinput> filters. Here, you can filter the 
variable <userinput>year</userinput>. For example:</para>

<screen>
(a) &lt;Years>year == 1982&lt;/Years>
(b) &lt;Years>year >= 1990 and year &amp;lt; 2000&lt;/Years>

(a) Include all games released in 1982.
(b) Include games released between 1990 and 1999.
</screen>

<para>You can see the game release statistics with the 
<userinput>list-years</userinput> command.</para>

<screen>
$ ./xru-mame.py list-years
XBMC ROM utilities - MAME edition version 0.1.0
[Parsing config file]
[Listing MAME controls]
NOTE: clones are not included
NOTE: mechanical are not included
NOTE: devices are not included
Parsing merged MAME XML file './DAT-mame/mame-0154-reduced.xml'...   done
[Release year histogram (raw)]
    1  2007?
    1  1973
...
    2  ????
...
    5  197?
...
  261  1996
  345  1995
  597  200?
  668  199?

[Release year histogram (trimmed)]
   22  2011
   23  2010
...
  952  1996
 1035  1995
</screen>

<para>Most games have a well determined release year, for example 1996. However,
some games (most of them fruit machines) have release years of the form 199?.
Also, for other games the release year is not completely determined, for example
1998?, or even not known at all (????). <application>xru-mame</application> will
remove all the trailing question marks (for example, 1998? becomes 1998) and 
undetermined years will be expanded. For example, a game with a year
defined as 199? will be included in the filter 
<userinput>year == 1992</userinput>. This year expansion can be controlled with the option
<userinput>&lt;YearsOpts>YearExpansion&lt;/YearsOpts></userinput>. Most user
will not want this option at all because games with unknown release years
are usually either fruit machines or low-quality bootlegs.</para>
</sect3>

<sect3>
<title>Testing your filter</title>

<para>After you have configured your source and destination directories and
your filters, you can check what games will be copied into the 
destination directory with the <userinput>check-filter</userinput> command. 
For the example, for the main filter configured above the results will be 
something like this.</para>

<screen>
$ ./xru-mame.py check-filter main
XBMC ROM utilities - MAME edition version 0.1.0
[Parsing config file]
[Checking filter]
Filter name = main
[Parsing MAME merged XML]
Parsing MAME merged XML file ./DAT-mame/mame-0154-merged.xml...  done
Total number of games = 30551
Number of parents = 10038
Number of clones = 20513
[Reading ROMs in source directory]
[Applying MAME filters]
NOTE: -vv if you want to see filters in action
&lt;Main filter>
Default filter, removing devices - Removed =   907 / Remaining = 29644
Filtering out clones             - Removed = 20513 / Remaining =  9131
User wants games with samples
Filtering out mechanical games   - Removed =  2622 / Remaining =  6509
Filtering out BIOS               - Removed =    67 / Remaining =  6442
Filtering out Non-Working games  - Removed =  2627 / Remaining =  3815
&lt;Driver filter>
Filter = "cps1 or cps2"
Removed =  3742 / Remaining =    73
&lt;Categories filter>
Filter = "not Mature and not Casino"
Removed =     0 / Remaining =    73
&lt;Controls filter>
Filter = "Joy or Lightgun and not Mahjong and not Hanafuda"
Removed =     4 / Remaining =    69
&lt;Buttons filter>
Filter = "buttons &lt; 8"
Removed =     0 / Remaining =    69
&lt;Players filter>
Filter = "players &lt; 8"
Removed =     0 / Remaining =    69
&lt;Year filter>
Filter = "year >= 1985 and year &lt; 2005"
Year expansion deactivated
Removed =     0 / Remaining =    69
[Adding ROM dependencies]
Game mpang    depends on device qsound      - Adding  to list
[Filtered game list]
&lt;Game> 1941     - Have ROM    - 1941: Counter Attack (World 900227) 
&lt;Game> 1944     - Have ROM    - 1944: The Loop Master (USA 000620) 
...
&lt;Game> xmvsf    - Have ROM    - X-Men Vs. Street Fighter (Euro 961004) 
[Report]
Number of filtered ROMs = 70
Number of have ROMs = 70
Number of missing ROMs = 0
</screen>

<para>Note than in this list only the filtered games are printed. You can see
if you have that ROM or not (missing ROM) in the source directory.</para>

<para>Once you are happy with your filter then it's time to copy your ROMs to
the destination directory.</para>
</sect3>
</sect2>

<sect2>
<title>Updating/Copying <application>MAME</application> ROMs</title>

<para>The <userinput>copy &lt;filterName></userinput> command will filter
your ROMs and then copy, one by one, every filtered ROMs into the
destination directory.</para>

<screen>
$ ./xru-mame.py copy main
XBMC ROM utilities - MAME edition version 0.1.0
[Parsing config file]
[Copy/Update ROMs]
Filter name = main
[Parsing MAME merged XML]
Parsing MAME merged XML file ./DAT-mame/mame-0154-merged.xml...  done
Total number of games = 30551
Number of parents = 10038
Number of clones = 20513
[Reading ROMs in source directory]
[Applying MAME filters]
NOTE: -vv if you want to see filters in action
&lt;Main filter>
Default filter, removing devices - Removed =   907 / Remaining = 29644
Filtering out clones             - Removed = 20513 / Remaining =  9131
User wants games with samples
Filtering out mechanical games   - Removed =  2622 / Remaining =  6509
Filtering out BIOS               - Removed =    67 / Remaining =  6442
Filtering out Non-Working games  - Removed =  2627 / Remaining =  3815
&lt;Driver filter>
Filter = "cps1 or cps2"
Removed =  3742 / Remaining =    73
&lt;Categories filter>
Filter = "not Mature and not Casino"
Removed =     0 / Remaining =    73
&lt;Controls filter>
Filter = "Joy or Lightgun and not Mahjong and not Hanafuda"
Removed =     4 / Remaining =    69
&lt;Buttons filter>
Filter = "buttons &lt; 8"
Removed =     0 / Remaining =    69
&lt;Players filter>
Filter = "players &lt; 8"
Removed =     0 / Remaining =    69
&lt;Year filter>
Filter = "year >= 1985 and year &lt; 2005"
Year expansion deactivated
Removed =     0 / Remaining =    69
[Adding ROM dependencies]
Game mpang    depends on device qsound      - Adding  to list
[Creating list of ROMs to be copied/updated]
Added 70 ROMs
[Copying ROMs into destDir]
  0% &lt;Copied> 1941.zip
  1% &lt;Copied> 1944.zip
...
 98% &lt;Copied> xmvsf.zip
[Report]
Copied ROMs     70
</screen>

<para>The <userinput>update &lt;filterName></userinput> command operates
in a similar way to <userinput>copy</userinput>. However, rather than
copying all the ROMs, each ROM in sourceDir is compared with the same
named ROM in destDir, and the file will be copied only if the destination
ROM does not exist or the file sizes are different. This is very
useful when you destination directory is network-mounted.
By default, only the newly copied files are displayed during the update
process. If you want to check also the updated files, then use the
option <userinput>-v</userinput> in the command line.</para>

<para>With both <userinput>copy</userinput> and <userinput>update</userinput> 
commands, you can use the flags <userinput>--dryRun</userinput> and
<userinput>--cleanROMs</userinput>.</para>

<para><userinput>--dryRun</userinput> will not perform any operation in your
files. Use this flag if you want to test what will happen with your ROMs,
and if you are happy with the results execute 
<application>xru-mame</application> without <userinput>--dryRun</userinput>
option. Note that if you use <userinput>--dryRun</userinput>, 
<userinput>--cleanROMs</userinput> will
show you inaccurate outcomes, since the destination directory is not modified.</para>

<para><userinput>--cleanROMs</userinput> will delete any unknown ROM in the
destination directory. After copying/update the filtered ROMs, the
destination directory will be scanned and any ROM not found in the list of
filtered ROMs will be deleted. Use this with caution! The list of deleted ROMs 
in destDir is always printed.</para>
</sect2>

<sect2>
<title>NFO files</title>

<para>Both <ulink url="http://forum.xbmc.org/showthread.php?tid=85724">Advanced Launcher</ulink> 
and <ulink url="http://forum.xbmc.org/showthread.php?tid=70115">ROM Collection Browser</ulink> 
create NFO files having the scrapped ROM information, like year of the release,
genre, etc. A typical NFO file looks like this.</para>

<screen>
&lt;?xml version="1.0" ?>
&lt;game>
  &lt;title>Toki (World, set 1)&lt;/title>
  &lt;platform>MAME&lt;/platform>
  &lt;year>1989&lt;/year>
  &lt;publisher>TAD Corporation&lt;/publisher>
  &lt;genre>Platform&lt;/genre>
  &lt;plot/>
&lt;/game>
</screen>

<para>The scrapping process may be extremely slow if your ROM collection is
huge. In order to speed up your
MAME ROM collection scanning, you can create NFO files if you specify 
the <userinput>--generateNFO</userinput> when invoking the <userinput>copy</userinput> or 
<userinput>update</userinput> commands and then use the offline scrapers. 
Note that the generated files will have and empty plot (maybe in a future version
of <application>xru-mame</application> the game plot will be extracted 
from <filename>history.dat</filename>).</para>

<para>Use the <userinput>--cleanNFO</userinput> to remove any unknown
NFO files, in a similar way to the <userinput>--cleanROMs</userinput> flag. The
list of deleted NFO files in destDir is always printed.</para>
</sect2>

<sect2>
<title>Artwork files</title>

<para>Regarding Artwork files, have a look first at the Artwork section of
<application>xru-console</application> because in <application>xru-mame</application>
this works in a very similar way. The main difference is that complete collections
of Artwork for MAME exist, so there is no need for artwork substitution in 
<application>xru-mame</application>. Either you have the artwork or not.</para>

<important>Artwork must have .png extension (lowercase).</important>

<para>If you have local Artwork available and want to copy it into destination
folders (synchronised with your filtered ROM list), then configure the following
into your MAME ROM filter.</para>

<programlisting>
&lt;MAMEFilter>
...
  &lt;ThumbsSource>/home/xbmc/roms/ArtWork/mame-titles/&lt;/ThumbsSource>
  &lt;FanartSource>/home/xbmc/roms/ArtWork/mame-snaps/&lt;/FanartSource>
  &lt;ThumbsDest  >/home/NUC-remote/ROMs/ArtWork/mame-thumbs/&lt;/ThumbsDest>
  &lt;FanartDest  >/home/NUC-remote/ROMs/ArtWork/mame-fanart/&lt;/FanartDest>
...
&lt;/MAMEFilter>
</programlisting>

<para>You may check you configuration with the
<userinput>check-artwork &lt;filterName></userinput> command. For example:</para>

<screen>
$ ./xru-console.py check-artwork main
XBMC ROM utilities - MAME edition version 0.1.0
[Parsing config file]
[Check-ArtWork]
Filter name = main
[Parsing MAME merged XML]
Parsing MAME merged XML file ./DAT-mame/mame-0154-merged.xml...  done
Total number of games = 30551
Number of parents = 10038
Number of clones = 20513
[Applying MAME filters]
NOTE: -vv if you want to see filters in action
&lt;Main filter>
Default filter, removing devices - Removed =   907 / Remaining = 29644
Filtering out clones             - Removed = 20513 / Remaining =  9131
User wants games with samples
Filtering out mechanical games   - Removed =  2622 / Remaining =  6509
Filtering out BIOS               - Removed =    67 / Remaining =  6442
Filtering out Non-Working games  - Removed =  2627 / Remaining =  3815
&lt;Driver filter>
Filter = "cps1 or cps2"
Removed =  3742 / Remaining =    73
&lt;Categories filter>
Filter = "not Mature and not Casino"
Removed =     0 / Remaining =    73
&lt;Controls filter>
Filter = "Joy or Lightgun and not Mahjong and not Hanafuda"
Removed =     4 / Remaining =    69
&lt;Buttons filter>
Filter = "buttons &lt; 8"
Removed =     0 / Remaining =    69
&lt;Players filter>
Filter = "players &lt; 8"
Removed =     0 / Remaining =    69
&lt;Year filter>
Filter = "year >= 1985 and year &lt; 2005"
Year expansion deactivated
Removed =     0 / Remaining =    69
[Adding ROM dependencies]
Game mpang    depends on device qsound      - Adding  to list
[Creating list of ROMs to be copied/updated]
Added 70 ROMs
[Artwork report]
&lt;&lt;  ROM  >> 1941.zip
 Original   1941
 Have T     1941.png
 Have F     1941.png
&lt;&lt;  ROM  >> 1944.zip
 Original   1944
 Have T     1944.png
 Have F     1944.png
...
&lt;&lt;  ROM  >> xmvsf.zip
 Original   xmvsf
 Have T     xmvsf.png
 Have F     xmvsf.png
Number of ROMs in destDir  = 70
Number of ArtWork found    = 70
Number of original ArtWork = 70
Number of replaced ArtWork = 0
Number of have Thumbs    = 70
Number of missing Thumbs = 0
Number of have Fanart    = 70
Number of missing Fanart = 0
</screen>

<para>Note that in <application>xru-mame</application> no artwork substitution
is done. All artwork should be either original or missing and if not 
that is a bug.</para>

<para>When you are happy with the results, you can copy/update your
artwork with the commands <userinput>copy-artwork &lt;filterName></userinput>
and <userinput>update-artwork &lt;filterName></userinput>. You can use the
<userinput>--cleanArtWork</userinput> flag if you want to delete
unknown artwork into the thumbs and fanart destination directories.</para>
</sect2>
</sect1>

<!-- ======================================================================= -->
<sect1>
<title><application>xru-launcher-AL</application></title>

<para><application>xru-launcher-AL</application> is a small utility that reads XBMC's 
<ulink url="http://forum.xbmc.org/showthread.php?tid=85724">Advanced Launcher</ulink>
configuration file and checks the launchers configured by the user. It reports 
if there are missing/unknown ROMs in your launcher and tells what 
launchers need to be updated.</para>

<screen>
$ xru-launcher-AL.py [-options] command
</screen>

<para>The following commands are supported.</para>

<itemizedlist mark='bullet'>
<listitem>
<para><userinput>usage</userinput></para>
<para>Print usage information.</para>
</listitem>

<listitem>
<para><userinput>list</userinput></para>
<para>Lists every launcher found in Advanced Launcher configuration file.</para>
</listitem>

<listitem>
<para><userinput>list-config</userinput></para>
<para>Lists every launcher found in the configuration file.</para>
</listitem>

<listitem>
<para><userinput>check</userinput></para>
<para>Checks the Advanced Launcher configuration file and compares against
the ROM directories. It reports if Advanced Launcher should rescan the
ROM launchers if outdated.</para>
</listitem>
</itemizedlist>

<para>The following options are supported.</para>

<itemizedlist>
<listitem>
<para><userinput>-h, --help</userinput></para>
<para>Print short command reference.</para>
</listitem>

<listitem>
<para><userinput>-v, --verbose</userinput></para>
<para>Print more information about what is going on.</para>
</listitem>

<listitem>
<para><userinput>-l, --log</userinput></para>
<para>Save program output in <filename>xru-launcher-AL-log.txt</filename></para>
</listitem>
</itemizedlist>

<sect2>
<title>Configuration</title>

<para><application>xru-launcher-AL</application> expects to be run on a different
computer where your XBMC media centre is. The XBMC user's directory is network-mounted
in the computer you run <application>xru-launcher-AL</application> using FUSE 
<application>sshfs</application>, <application>nfs</application>,
<application>samba</application>, etc. However, it can also be run on the
HTPC computer.</para>

<para>To start using <application>xru-launcher-AL</application>, create a
minimalistic configuration file named 
<filename>xru-launcher-AL-config.xml</filename>.</para>

<programlisting>
&lt;AdvancedLauncher>
&lt;configFile>/home/NUC-remote/.xbmc/userdata/addon_data/plugin.program.advanced.launcher/launchers.xml&lt;/configFile>
&lt;/AdvancedLauncher>
</programlisting>

<para>The tag <userinput>configFile</userinput> configures the location of 
<ulink url="http://forum.xbmc.org/showthread.php?tid=85724">Advanced Launcher's</ulink> 
configuration file. Next, use the <userinput>list</userinput> command to read 
<ulink url="http://forum.xbmc.org/showthread.php?tid=85724">Advanced Launcher's</ulink> 
configuration file and list every launcher found there. You should get 
something like this.</para>

<programlisting>
$ ./xru-launcher-AL.py list       
XBMC ROM utilities - Advanced Launcher version 0.1.0
[Parsing config file]
[Listing Advanced Launcher launchers]
Parsing Advanced Launcher configuration file... done
&lt;Launcher>
 lauch_name        = "Game Boy Advance (RetroArch VBA-Next)"
 lauch_application = /home/xbmc/bin/bin-retroarch/retroarch
 lauch_args        = -L /home/xbmc/bin/bin-libretro/vba_next_libretro.so "%rom%"
 lauch_rompath     = /home/xbmc/ROMs/roms-nintendo-gbadvance-nointro/
 lauch_thumbpath   = /home/xbmc/ROMs/artwork-AL/artwork-nintendo-gbadvance/thumbs/
 lauch_fanartpath  = /home/xbmc/ROMs/artwork-AL/artwork-nintendo-gbadvance/fanart/
 lauch_romext      = zip
...
</programlisting>

<para>For every launcher you want to check you need to create an entry
in <application>xru-launcher-AL</application> configuration file. To
check the launcher in the example, add this to the configuration
file <filename>xru-launcher-AL-config.xml</filename>.</para>

<programlisting>
&lt;AdvancedLauncher>
&lt;configFile>/home/NUC-remote/.xbmc/userdata/addon_data/plugin.program.advanced.launcher/launchers.xml&lt;/configFile>

&lt;launcher name="Game Boy Advance (RetroArch VBA-Next)">
&lt;ROMsDest  >/home/NUC-remote/ROMs/roms-nintendo-gbadvance-nointro/&lt;/ROMsDest>
&lt;FanartDest>/home/NUC-remote/ROMs/artwork-AL/artwork-nintendo-gbadvance/fanart/&lt;/FanartDest>
&lt;ThumbsDest>/home/NUC-remote/ROMs/artwork-AL/artwork-nintendo-gbadvance/thumbs/&lt;/ThumbsDest>
&lt;/launcher>
&lt;/AdvancedLauncher>
</programlisting>

<para>Because <application>xru-launcher-AL</application> runs on a different computer
that Advanced Launcher, directory names will be different, so you have to tell
<application>xru-launcher-AL</application> the directory location on the local computer
of the remote (network mounted) directories. Only the launchers listed in
<application>xru-launcher-AL</application>'s configuration file will be checked.</para>

<para>Once you have finished editing the configuration file, you can
check the configured launchers with the <userinput>list-config</userinput> command.
For example.</para>

<programlisting>
$ ./xru-launcher-AL.py list-config
XBMC ROM utilities - Advanced Launcher version 0.1.0
[Parsing config file]
[Listing configuration]
Advanced Launcher configuration file
 /home/NUC-remote/.xbmc/userdata/addon_data/plugin.program.advanced.launcher/launchers.xml
&lt;Launcher>
 name          = Game Boy Advance (RetroArch VBA-Next)
 destDir       = /home/NUC-remote/ROMs/roms-nintendo-gbadvance-nointro/
 fanartDestDir = /home/NUC-remote/ROMs/artwork-AL/artwork-nintendo-gbadvance/fanart/
 thumbsDestDir = /home/NUC-remote/ROMs/artwork-AL/artwork-nintendo-gbadvance/thumbs/
</programlisting>
</sect2>

<sect2>
<title>Checking launchers</title>

<para>To check your launchers use the <userinput>check</userinput> command. You will
see some information of the process and at the end a report of the launchers not
checked, launchers checked and up to date, and launchers checked which need
an update.</para>

<programlisting>
$ ./xru-launcher-AL.py check
XBMC ROM utilities - Advanced Launcher version 0.1.0
[Parsing config file]
[Checking Advanced Launcher launchers]
Parsing Advanced Launcher configuration file... done
&lt;Launcher> 'Game Boy Advance (RetroArch VBA-Next)'
 Not found AL configuration file ROM path
 Using configured ROM local path for this launcher
 0 not found ROMs in AL configuration file
 0 missing ROMs in AL configuration file
...
&lt;Launcher> 'SNES (Mednafen)'
 Not found AL configuration file ROM path
 Using configured ROM local path for this launcher
 0 not found ROMs in AL configuration file
 0 missing ROMs in AL configuration file
[Report]
The following launchers were not checked
 Playstation (Mednafen)
The following launchers were checked and are up to date
 MAME
 MAME CPS1
 MAME CPS2
 MAME CPS3
 MAME Neo-Geo
 SNES (Mednafen)
Advanced Launcher needs an update for the following launchers
 Game Boy Color (Mednafen)
 Game Gear (Mednafen)
 Mega Drive 32X (RetroArch Picodrive)
</programlisting>

</sect2>
</sect1>

<!-- ======================================================================= -->
<sect1>
<title>Examples</title>

<sect2>
<title>Simple filtering of a console ROM collection</title>

<para>You have a No-Intro ROM collection of the Sega Genesis and want to
filter this collection to remove clone ROMs and Japanese ROMs. This is the 
situation.</para>

<itemizedlist>
<listitem><para>The ROM collection is stored in your desktop computer in 
the directory <filename>/home/wintermute/No-Intro/Sega Genesis/</filename>. 
</para></listitem>

<listitem><para>
XBMC is installed on a dedicated HTPC, which uses XBMCbuntu. XBMC runs 
with user xbmc.</para></listitem>

<listitem><para>The xbmc user's home directory is network-mounted in the 
desktop computer using FUSE's <application>sshfs</application> in 
<filename>/home/XBMC-remote/</filename>.</para>
</listitem>

<listitem><para>You want to store your ROM collection in the HTPC computer in
the directory <filename>/home/xbmc/ROMs/roms-sega-genesis/</filename>. Note 
that in the desktop computer this directory is 
<filename>/home/XBMC-remote/ROMs/roms-sega-genesis/</filename>.</para>
</listitem>

<listitem><para>You prefer European/USA ROMs over Japanese ones. Also, you
want to remove all Japanese games.</para>
</listitem>
</itemizedlist>

<para>First, create the destination directories. Make sure your HTPC
is network-mounted.</para>

<screen>
$ mkdir /home/XBMC-remote/ROMs/roms-sega-genesis
</screen>

<para>Then, create the configuration file
<filename>xru-console-config.xml</filename>.</para>

<screen>
&lt;ROMcollections>
&lt;collection name="Sega Mega Drive" shortname="genesis">
  &lt;ROMsSource>/home/wintermute/No-Intro/Sega Genesis/&lt;/ROMsSource>
  &lt;ROMsDest  >/home/XBMC-remote/ROMs/roms-sega-genesis/&lt;/ROMsDest>

  &lt;filterUpTags>Europe, World, Rev2, Rev 1, Rev A&lt;/filterUpTags>
  &lt;filterDownTags>Japan, Beta, Proto&lt;/filterDownTags>
  &lt;includeTags>Europe, USA&lt;/includeTags>
  &lt;excludeTags>Japan&lt;/excludeTags>
&lt;/collection>
&lt;/ROMcollections> 
</screen>

<para>Next, check everything is all-right.</para>

<screen>
$ ./xru-console.py check-filter genesis
</screen>

<para>Finally, copy the ROMs.</para>

<screen>
$ ./xru-console.py update genesis
</screen>

</sect2>

<sect2>
<title>Splitting <application>MAME</application> ROMs into several launchers
for each driver</title>

<para>You have a <application>MAME</application> ROM collection
and want to split it into 3 folders: First one will have most
games, second folder will have only CPS1 games, and third folder
will have only CPS2 games. The ROM collection is stored in your desktop 
computer in the directory <filename>/home/wintermute/MAME/roms/</filename>.
The xbmc user's home directory is network-mounted in the 
desktop computer using FUSE's <application>sshfs</application> in 
<filename>/home/XBMC-remote/</filename>.</para>

<para>First, create the destination directories. Make sure your HTPC
is network-mounted.</para>

<screen>
$ pwd
/home/wintermute
$ mkdir DAT-mame
$ mkdir /home/XBMC-remote/ROMs/roms-mame-main
$ mkdir /home/XBMC-remote/ROMs/roms-mame-cps1
$ mkdir /home/XBMC-remote/ROMs/roms-mame-cps2
</screen>

<para>Create the <application>MAME</application> game database as
described <link linkend="create_mame_database">here</link>.</para>

<para>Then, create the configuration file
<filename>xru-mame-config.xml</filename>.</para>

<screen>
&lt;MAMEConfig>
&lt;General>
  &lt;MAME_XML      >./DAT-mame/mame-0154.xml&lt;/MAME_XML>
  &lt;MAME_XML_redux>./DAT-mame/mame-0154-reduced.xml&lt;/MAME_XML_redux>
  &lt;Catver        >./DAT-mame/Catver.ini&lt;/Catver>
  &lt;MergedInfo    >./DAT-mame/mame-0154-reduced.xml&lt;/MergedInfo>
&lt;/General>

&lt;MAMEFilter name="main">
  &lt;ROMsSource>/home/wintermute/MAME/roms-mame/&lt;/ROMsSource>
  &lt;ROMsDest  >/home/NUC-remote/ROMs/roms-mame-main/&lt;/ROMsDest>

  &lt;MainFilter>NoClones, NoMechanical, NoBIOS, NoNonworking&lt;/MainFilter>
  &lt;Driver>not cps1 and not cps2 and not cps3 and not neogeo_noslot&lt;/Driver>
  &lt;Categories>not Casino and not PinMAME and not Fruit_Machines&lt;/Categories>
  &lt;Controls>Joy and not(Mahjong or Gambling or Hanafuda)&lt;/Controls>
  &lt;Buttons>buttons &amp;lt;= 8&lt;/Buttons>
  &lt;Players>&lt;/Players>
  &lt;Years>&lt;/Years>
&lt;/MAMEFilter>

&lt;MAMEFilter name="cps1">
  &lt;ROMsSource>/home/wintermute/MAME/roms-mame/&lt;/ROMsSource>
  &lt;ROMsDest  >/home/wintermute/NUC-remote/ROMs/roms-mame-cps1/&lt;/ROMsDest>

  &lt;MainFilter>NoClones, NoSamples, NoMechanical&lt;/MainFilter>
  &lt;Driver>cps1&lt;/Driver>
&lt;/MAMEFilter>

&lt;MAMEFilter name="cps2">
  &lt;ROMsSource>/home/wintermute/MAME/roms-mame/&lt;/ROMsSource>
  &lt;ROMsDest  >/home/wintermute/NUC-remote/ROMs/roms-mame-cps2/&lt;/ROMsDest>

  &lt;MainFilter>NoClones, NoSamples, NoMechanical&lt;/MainFilter>
  &lt;Driver>cps2&lt;/Driver>
&lt;/MAMEFilter>
&lt;/MAMEConfig> 
</screen>

<para>Next, check everything is all-right.</para>

<screen>
$ ./xru-mame.py check-filter main
$ ./xru-mame.py check-filter cps1
$ ./xru-mame.py check-filter cps2
</screen>

<para>Finally, copy the ROMs.</para>

<screen>
$ ./xru-mame.py update main
$ ./xru-mame.py update cps1
$ ./xru-mame.py update cps2
</screen>
</sect2>
</sect1>

<!--
<sect1>
<title>TODO</title>

<itemizedlist mark='bullet'>
<listitem><para>Nothing.</para></listitem>
</itemizedlist>
</sect1>
-->

<!-- ======================================================================= -->
<sect1>
<title>Changelog</title>

<sect2>
<title>Version 0.1</title>
</sect2>
<para>Released on July 2014.</para>

<itemizedlist mark='bullet'>
<listitem>
<para>Initial release.</para>
</listitem>
</itemizedlist>
</sect1>

</article>
